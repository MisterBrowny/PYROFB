
DigitalInputPullup.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000056  00800100  00001196  0000122a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001196  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000111  00800156  00800156  00001280  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001280  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000012b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002f0  00000000  00000000  000012f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00008340  00000000  00000000  000015e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000196d  00000000  00000000  00009920  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001e79  00000000  00000000  0000b28d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000009ec  00000000  00000000  0000d108  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000022ea  00000000  00000000  0000daf4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003795  00000000  00000000  0000fdde  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002c8  00000000  00000000  00013573  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__ctors_end>
       4:	0c 94 9a 01 	jmp	0x334	; 0x334 <__vector_1>
       8:	0c 94 c1 01 	jmp	0x382	; 0x382 <__vector_2>
       c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__vector_3>
      10:	0c 94 4b 02 	jmp	0x496	; 0x496 <__vector_4>
      14:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__vector_5>
      18:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      1c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      20:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      24:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      28:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      2c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      30:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      34:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      38:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      3c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      40:	0c 94 53 07 	jmp	0xea6	; 0xea6 <__vector_16>
      44:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      48:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <__vector_18>
      4c:	0c 94 f0 05 	jmp	0xbe0	; 0xbe0 <__vector_19>
      50:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      54:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      58:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      5c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      60:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      64:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 01       	movw	r0, r0
      6a:	02 03       	mulsu	r16, r18
      6c:	04 05       	cpc	r16, r4
      6e:	06 07       	cpc	r16, r22
      70:	00 01       	movw	r0, r0
      72:	02 03       	mulsu	r16, r18
      74:	04 05       	cpc	r16, r4
      76:	00 01       	movw	r0, r0
      78:	02 03       	mulsu	r16, r18
      7a:	04 05       	cpc	r16, r4

0000007c <digital_pin_to_timer_PGM>:
      7c:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
      8c:	00 00 00 00                                         ....

00000090 <digital_pin_to_bit_mask_PGM>:
      90:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      a0:	04 08 10 20                                         ... 

000000a4 <digital_pin_to_port_PGM>:
      a4:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      b4:	03 03 03 03                                         ....

000000b8 <port_to_input_PGM>:
      b8:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000c2 <port_to_output_PGM>:
      c2:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000cc <port_to_mode_PGM>:
      cc:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000d6 <__ctors_start>:
      d6:	20 06       	cpc	r2, r16

000000d8 <__ctors_end>:
      d8:	11 24       	eor	r1, r1
      da:	1f be       	out	0x3f, r1	; 63
      dc:	cf ef       	ldi	r28, 0xFF	; 255
      de:	d8 e0       	ldi	r29, 0x08	; 8
      e0:	de bf       	out	0x3e, r29	; 62
      e2:	cd bf       	out	0x3d, r28	; 61

000000e4 <__do_copy_data>:
      e4:	11 e0       	ldi	r17, 0x01	; 1
      e6:	a0 e0       	ldi	r26, 0x00	; 0
      e8:	b1 e0       	ldi	r27, 0x01	; 1
      ea:	e6 e9       	ldi	r30, 0x96	; 150
      ec:	f1 e1       	ldi	r31, 0x11	; 17
      ee:	02 c0       	rjmp	.+4      	; 0xf4 <__do_copy_data+0x10>
      f0:	05 90       	lpm	r0, Z+
      f2:	0d 92       	st	X+, r0
      f4:	a6 35       	cpi	r26, 0x56	; 86
      f6:	b1 07       	cpc	r27, r17
      f8:	d9 f7       	brne	.-10     	; 0xf0 <__do_copy_data+0xc>

000000fa <__do_clear_bss>:
      fa:	22 e0       	ldi	r18, 0x02	; 2
      fc:	a6 e5       	ldi	r26, 0x56	; 86
      fe:	b1 e0       	ldi	r27, 0x01	; 1
     100:	01 c0       	rjmp	.+2      	; 0x104 <.do_clear_bss_start>

00000102 <.do_clear_bss_loop>:
     102:	1d 92       	st	X+, r1

00000104 <.do_clear_bss_start>:
     104:	a7 36       	cpi	r26, 0x67	; 103
     106:	b2 07       	cpc	r27, r18
     108:	e1 f7       	brne	.-8      	; 0x102 <.do_clear_bss_loop>

0000010a <__do_global_ctors>:
     10a:	10 e0       	ldi	r17, 0x00	; 0
     10c:	cc e6       	ldi	r28, 0x6C	; 108
     10e:	d0 e0       	ldi	r29, 0x00	; 0
     110:	04 c0       	rjmp	.+8      	; 0x11a <__do_global_ctors+0x10>
     112:	21 97       	sbiw	r28, 0x01	; 1
     114:	fe 01       	movw	r30, r28
     116:	0e 94 c3 08 	call	0x1186	; 0x1186 <__tablejump2__>
     11a:	cb 36       	cpi	r28, 0x6B	; 107
     11c:	d1 07       	cpc	r29, r17
     11e:	c9 f7       	brne	.-14     	; 0x112 <__do_global_ctors+0x8>
     120:	0e 94 4e 06 	call	0xc9c	; 0xc9c <main>
     124:	0c 94 c9 08 	jmp	0x1192	; 0x1192 <_exit>

00000128 <__bad_interrupt>:
     128:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012c <_Z16Pyro_1_Interruptv>:
#endif
#ifndef EI_NOTINT1
if (arduinoPin == 3) {
  EIMSK &= ~_BV(1);
  EICRA &= (~_BV(2) & ~_BV(3));
  EIFR  |= _BV(1); // using a clue from the ATmega2560 datasheet.
     12c:	84 e0       	ldi	r24, 0x04	; 4
     12e:	0e 94 78 08 	call	0x10f0	; 0x10f0 <digitalRead>
     132:	89 2b       	or	r24, r25
     134:	21 f0       	breq	.+8      	; 0x13e <_Z16Pyro_1_Interruptv+0x12>
     136:	81 e0       	ldi	r24, 0x01	; 1
     138:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <__data_end>
     13c:	08 95       	ret
     13e:	81 e0       	ldi	r24, 0x01	; 1
     140:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <__data_end+0x1>
     144:	08 95       	ret

00000146 <_Z16Pyro_2_Interruptv>:
     146:	85 e0       	ldi	r24, 0x05	; 5
     148:	0e 94 78 08 	call	0x10f0	; 0x10f0 <digitalRead>
     14c:	89 2b       	or	r24, r25
     14e:	21 f0       	breq	.+8      	; 0x158 <_Z16Pyro_2_Interruptv+0x12>
     150:	81 e0       	ldi	r24, 0x01	; 1
     152:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <__data_end+0xd>
     156:	08 95       	ret
     158:	81 e0       	ldi	r24, 0x01	; 1
     15a:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <__data_end+0xe>
     15e:	08 95       	ret

00000160 <_Z16Pyro_3_Interruptv>:
     160:	86 e0       	ldi	r24, 0x06	; 6
     162:	0e 94 78 08 	call	0x10f0	; 0x10f0 <digitalRead>
     166:	89 2b       	or	r24, r25
     168:	21 f0       	breq	.+8      	; 0x172 <_Z16Pyro_3_Interruptv+0x12>
     16a:	81 e0       	ldi	r24, 0x01	; 1
     16c:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <__data_end+0x1a>
     170:	08 95       	ret
     172:	81 e0       	ldi	r24, 0x01	; 1
     174:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <__data_end+0x1b>
     178:	08 95       	ret

0000017a <_Z16Pyro_4_Interruptv>:
     17a:	87 e0       	ldi	r24, 0x07	; 7
     17c:	0e 94 78 08 	call	0x10f0	; 0x10f0 <digitalRead>
     180:	89 2b       	or	r24, r25
     182:	21 f0       	breq	.+8      	; 0x18c <_Z16Pyro_4_Interruptv+0x12>
     184:	81 e0       	ldi	r24, 0x01	; 1
     186:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <__data_end+0x27>
     18a:	08 95       	ret
     18c:	81 e0       	ldi	r24, 0x01	; 1
     18e:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <__data_end+0x28>
     192:	08 95       	ret

00000194 <_Z15enableInterrupthPFvvEh>:
     194:	e8 2f       	mov	r30, r24
     196:	ef 77       	andi	r30, 0x7F	; 127
     198:	87 fd       	sbrc	r24, 7
     19a:	05 c0       	rjmp	.+10     	; 0x1a6 <_Z15enableInterrupthPFvvEh+0x12>
     19c:	8e ef       	ldi	r24, 0xFE	; 254
     19e:	8e 0f       	add	r24, r30
     1a0:	82 30       	cpi	r24, 0x02	; 2
     1a2:	08 f4       	brcc	.+2      	; 0x1a6 <_Z15enableInterrupthPFvvEh+0x12>
     1a4:	9a c0       	rjmp	.+308    	; 0x2da <_Z15enableInterrupthPFvvEh+0x146>
     1a6:	8e 2f       	mov	r24, r30
     1a8:	90 e0       	ldi	r25, 0x00	; 0
     1aa:	fc 01       	movw	r30, r24
     1ac:	e0 57       	subi	r30, 0x70	; 112
     1ae:	ff 4f       	sbci	r31, 0xFF	; 255
     1b0:	24 91       	lpm	r18, Z
     1b2:	fc 01       	movw	r30, r24
     1b4:	ec 55       	subi	r30, 0x5C	; 92
     1b6:	ff 4f       	sbci	r31, 0xFF	; 255
     1b8:	34 91       	lpm	r19, Z
     1ba:	54 2f       	mov	r21, r20
     1bc:	5d 7f       	andi	r21, 0xFD	; 253
     1be:	51 30       	cpi	r21, 0x01	; 1
     1c0:	b9 f4       	brne	.+46     	; 0x1f0 <_Z15enableInterrupthPFvvEh+0x5c>
     1c2:	32 30       	cpi	r19, 0x02	; 2
     1c4:	31 f4       	brne	.+12     	; 0x1d2 <_Z15enableInterrupthPFvvEh+0x3e>
     1c6:	50 91 92 01 	lds	r21, 0x0192	; 0x800192 <risingPinsPORTB>
     1ca:	52 2b       	or	r21, r18
     1cc:	50 93 92 01 	sts	0x0192, r21	; 0x800192 <risingPinsPORTB>
     1d0:	0f c0       	rjmp	.+30     	; 0x1f0 <_Z15enableInterrupthPFvvEh+0x5c>
     1d2:	33 30       	cpi	r19, 0x03	; 3
     1d4:	31 f4       	brne	.+12     	; 0x1e2 <_Z15enableInterrupthPFvvEh+0x4e>
     1d6:	50 91 8f 01 	lds	r21, 0x018F	; 0x80018f <risingPinsPORTC>
     1da:	52 2b       	or	r21, r18
     1dc:	50 93 8f 01 	sts	0x018F, r21	; 0x80018f <risingPinsPORTC>
     1e0:	07 c0       	rjmp	.+14     	; 0x1f0 <_Z15enableInterrupthPFvvEh+0x5c>
     1e2:	34 30       	cpi	r19, 0x04	; 4
     1e4:	29 f4       	brne	.+10     	; 0x1f0 <_Z15enableInterrupthPFvvEh+0x5c>
     1e6:	50 91 8c 01 	lds	r21, 0x018C	; 0x80018c <risingPinsPORTD>
     1ea:	52 2b       	or	r21, r18
     1ec:	50 93 8c 01 	sts	0x018C, r21	; 0x80018c <risingPinsPORTD>
     1f0:	41 50       	subi	r20, 0x01	; 1
     1f2:	42 30       	cpi	r20, 0x02	; 2
     1f4:	b8 f4       	brcc	.+46     	; 0x224 <_Z15enableInterrupthPFvvEh+0x90>
     1f6:	32 30       	cpi	r19, 0x02	; 2
     1f8:	31 f4       	brne	.+12     	; 0x206 <_Z15enableInterrupthPFvvEh+0x72>
     1fa:	40 91 91 01 	lds	r20, 0x0191	; 0x800191 <fallingPinsPORTB>
     1fe:	42 2b       	or	r20, r18
     200:	40 93 91 01 	sts	0x0191, r20	; 0x800191 <fallingPinsPORTB>
     204:	0f c0       	rjmp	.+30     	; 0x224 <_Z15enableInterrupthPFvvEh+0x90>
     206:	33 30       	cpi	r19, 0x03	; 3
     208:	31 f4       	brne	.+12     	; 0x216 <_Z15enableInterrupthPFvvEh+0x82>
     20a:	40 91 8e 01 	lds	r20, 0x018E	; 0x80018e <fallingPinsPORTC>
     20e:	42 2b       	or	r20, r18
     210:	40 93 8e 01 	sts	0x018E, r20	; 0x80018e <fallingPinsPORTC>
     214:	07 c0       	rjmp	.+14     	; 0x224 <_Z15enableInterrupthPFvvEh+0x90>
     216:	34 30       	cpi	r19, 0x04	; 4
     218:	29 f4       	brne	.+10     	; 0x224 <_Z15enableInterrupthPFvvEh+0x90>
     21a:	40 91 8b 01 	lds	r20, 0x018B	; 0x80018b <fallingPinsPORTD>
     21e:	42 2b       	or	r20, r18
     220:	40 93 8b 01 	sts	0x018B, r20	; 0x80018b <fallingPinsPORTD>
     224:	fc 01       	movw	r30, r24
     226:	e8 59       	subi	r30, 0x98	; 152
     228:	ff 4f       	sbci	r31, 0xFF	; 255
     22a:	a4 91       	lpm	r26, Z
     22c:	32 30       	cpi	r19, 0x02	; 2
     22e:	c1 f4       	brne	.+48     	; 0x260 <_Z15enableInterrupthPFvvEh+0xcc>
     230:	b0 e0       	ldi	r27, 0x00	; 0
     232:	aa 0f       	add	r26, r26
     234:	bb 1f       	adc	r27, r27
     236:	a1 55       	subi	r26, 0x51	; 81
     238:	be 4f       	sbci	r27, 0xFE	; 254
     23a:	6d 93       	st	X+, r22
     23c:	7c 93       	st	X, r23
     23e:	ec eb       	ldi	r30, 0xBC	; 188
     240:	f0 e0       	ldi	r31, 0x00	; 0
     242:	a5 91       	lpm	r26, Z+
     244:	b4 91       	lpm	r27, Z
     246:	8c 91       	ld	r24, X
     248:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <_ZL13portSnapshotB>
     24c:	8b e6       	ldi	r24, 0x6B	; 107
     24e:	90 e0       	ldi	r25, 0x00	; 0
     250:	90 93 c0 01 	sts	0x01C0, r25	; 0x8001c0 <pcmsk+0x1>
     254:	80 93 bf 01 	sts	0x01BF, r24	; 0x8001bf <pcmsk>
     258:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
     25c:	81 60       	ori	r24, 0x01	; 1
     25e:	33 c0       	rjmp	.+102    	; 0x2c6 <_Z15enableInterrupthPFvvEh+0x132>
     260:	33 30       	cpi	r19, 0x03	; 3
     262:	c1 f4       	brne	.+48     	; 0x294 <_Z15enableInterrupthPFvvEh+0x100>
     264:	b0 e0       	ldi	r27, 0x00	; 0
     266:	aa 0f       	add	r26, r26
     268:	bb 1f       	adc	r27, r27
     26a:	ad 55       	subi	r26, 0x5D	; 93
     26c:	be 4f       	sbci	r27, 0xFE	; 254
     26e:	6d 93       	st	X+, r22
     270:	7c 93       	st	X, r23
     272:	ee eb       	ldi	r30, 0xBE	; 190
     274:	f0 e0       	ldi	r31, 0x00	; 0
     276:	a5 91       	lpm	r26, Z+
     278:	b4 91       	lpm	r27, Z
     27a:	8c 91       	ld	r24, X
     27c:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <_ZL13portSnapshotC>
     280:	8c e6       	ldi	r24, 0x6C	; 108
     282:	90 e0       	ldi	r25, 0x00	; 0
     284:	90 93 c0 01 	sts	0x01C0, r25	; 0x8001c0 <pcmsk+0x1>
     288:	80 93 bf 01 	sts	0x01BF, r24	; 0x8001bf <pcmsk>
     28c:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
     290:	82 60       	ori	r24, 0x02	; 2
     292:	19 c0       	rjmp	.+50     	; 0x2c6 <_Z15enableInterrupthPFvvEh+0x132>
     294:	34 30       	cpi	r19, 0x04	; 4
     296:	c9 f4       	brne	.+50     	; 0x2ca <_Z15enableInterrupthPFvvEh+0x136>
     298:	b0 e0       	ldi	r27, 0x00	; 0
     29a:	aa 0f       	add	r26, r26
     29c:	bb 1f       	adc	r27, r27
     29e:	ad 56       	subi	r26, 0x6D	; 109
     2a0:	be 4f       	sbci	r27, 0xFE	; 254
     2a2:	6d 93       	st	X+, r22
     2a4:	7c 93       	st	X, r23
     2a6:	e0 ec       	ldi	r30, 0xC0	; 192
     2a8:	f0 e0       	ldi	r31, 0x00	; 0
     2aa:	a5 91       	lpm	r26, Z+
     2ac:	b4 91       	lpm	r27, Z
     2ae:	8c 91       	ld	r24, X
     2b0:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <_ZL13portSnapshotD>
     2b4:	8d e6       	ldi	r24, 0x6D	; 109
     2b6:	90 e0       	ldi	r25, 0x00	; 0
     2b8:	90 93 c0 01 	sts	0x01C0, r25	; 0x8001c0 <pcmsk+0x1>
     2bc:	80 93 bf 01 	sts	0x01BF, r24	; 0x8001bf <pcmsk>
     2c0:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
     2c4:	84 60       	ori	r24, 0x04	; 4
     2c6:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
     2ca:	a0 91 bf 01 	lds	r26, 0x01BF	; 0x8001bf <pcmsk>
     2ce:	b0 91 c0 01 	lds	r27, 0x01C0	; 0x8001c0 <pcmsk+0x1>
     2d2:	ec 91       	ld	r30, X
     2d4:	2e 2b       	or	r18, r30
     2d6:	2c 93       	st	X, r18
     2d8:	08 95       	ret
     2da:	9f b7       	in	r25, 0x3f	; 63
     2dc:	f8 94       	cli
     2de:	e2 30       	cpi	r30, 0x02	; 2
     2e0:	99 f4       	brne	.+38     	; 0x308 <_Z15enableInterrupthPFvvEh+0x174>
     2e2:	70 93 bc 01 	sts	0x01BC, r23	; 0x8001bc <functionPointerArrayEXTERNAL+0x1>
     2e6:	60 93 bb 01 	sts	0x01BB, r22	; 0x8001bb <functionPointerArrayEXTERNAL>
     2ea:	e8 98       	cbi	0x1d, 0	; 29
     2ec:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
     2f0:	8c 7f       	andi	r24, 0xFC	; 252
     2f2:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
     2f6:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
     2fa:	48 2b       	or	r20, r24
     2fc:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
     300:	e0 9a       	sbi	0x1c, 0	; 28
     302:	e8 9a       	sbi	0x1d, 0	; 29
     304:	9f bf       	out	0x3f, r25	; 63
     306:	08 95       	ret
     308:	70 93 be 01 	sts	0x01BE, r23	; 0x8001be <functionPointerArrayEXTERNAL+0x3>
     30c:	60 93 bd 01 	sts	0x01BD, r22	; 0x8001bd <functionPointerArrayEXTERNAL+0x2>
     310:	e9 98       	cbi	0x1d, 1	; 29
     312:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
     316:	83 7f       	andi	r24, 0xF3	; 243
     318:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
     31c:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
     320:	24 e0       	ldi	r18, 0x04	; 4
     322:	42 9f       	mul	r20, r18
     324:	a0 01       	movw	r20, r0
     326:	11 24       	eor	r1, r1
     328:	48 2b       	or	r20, r24
     32a:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
     32e:	e1 9a       	sbi	0x1c, 1	; 28
     330:	e9 9a       	sbi	0x1d, 1	; 29
     332:	e8 cf       	rjmp	.-48     	; 0x304 <_Z15enableInterrupthPFvvEh+0x170>

00000334 <__vector_1>:
// *************************************************************************************
// External Interrupts
// *************************************************************************************
#ifndef EI_NOTEXTERNAL
#ifndef EI_NOTINT0
ISR(INT0_vect) {/*{{{*/
     334:	1f 92       	push	r1
     336:	0f 92       	push	r0
     338:	0f b6       	in	r0, 0x3f	; 63
     33a:	0f 92       	push	r0
     33c:	11 24       	eor	r1, r1
     33e:	2f 93       	push	r18
     340:	3f 93       	push	r19
     342:	4f 93       	push	r20
     344:	5f 93       	push	r21
     346:	6f 93       	push	r22
     348:	7f 93       	push	r23
     34a:	8f 93       	push	r24
     34c:	9f 93       	push	r25
     34e:	af 93       	push	r26
     350:	bf 93       	push	r27
     352:	ef 93       	push	r30
     354:	ff 93       	push	r31
#elif defined EI_ATTINY25
  arduinoInterruptedPin=ARDUINO_PIN_B0; arduinoPinState=PINB & _BV(0);
#endif
#endif // EI_ARDUINO_INTERRUPTED_PIN
#if ! defined EI_ATTINY25 && ! defined EI_ATTINY24
  (*functionPointerArrayEXTERNAL[0])();
     356:	e0 91 bb 01 	lds	r30, 0x01BB	; 0x8001bb <functionPointerArrayEXTERNAL>
     35a:	f0 91 bc 01 	lds	r31, 0x01BC	; 0x8001bc <functionPointerArrayEXTERNAL+0x1>
     35e:	09 95       	icall
  INTERRUPT_FLAG_PIN2++;
#endif
#endif

#endif // NEEDFORSPEED
}/*}}}*/
     360:	ff 91       	pop	r31
     362:	ef 91       	pop	r30
     364:	bf 91       	pop	r27
     366:	af 91       	pop	r26
     368:	9f 91       	pop	r25
     36a:	8f 91       	pop	r24
     36c:	7f 91       	pop	r23
     36e:	6f 91       	pop	r22
     370:	5f 91       	pop	r21
     372:	4f 91       	pop	r20
     374:	3f 91       	pop	r19
     376:	2f 91       	pop	r18
     378:	0f 90       	pop	r0
     37a:	0f be       	out	0x3f, r0	; 63
     37c:	0f 90       	pop	r0
     37e:	1f 90       	pop	r1
     380:	18 95       	reti

00000382 <__vector_2>:
#endif // EI_NOTINT0

#if ! defined(EI_ATTINY24) && ! defined(EI_ATTINY25)
#ifndef EI_NOTINT1
ISR(INT1_vect) {/*{{{*/
     382:	1f 92       	push	r1
     384:	0f 92       	push	r0
     386:	0f b6       	in	r0, 0x3f	; 63
     388:	0f 92       	push	r0
     38a:	11 24       	eor	r1, r1
     38c:	2f 93       	push	r18
     38e:	3f 93       	push	r19
     390:	4f 93       	push	r20
     392:	5f 93       	push	r21
     394:	6f 93       	push	r22
     396:	7f 93       	push	r23
     398:	8f 93       	push	r24
     39a:	9f 93       	push	r25
     39c:	af 93       	push	r26
     39e:	bf 93       	push	r27
     3a0:	ef 93       	push	r30
     3a2:	ff 93       	push	r31
  arduinoInterruptedPin=ARDUINO_PIN_D1; arduinoPinState=PIND & _BV(1);
#elif defined ARDUINO_328
  arduinoInterruptedPin=ARDUINO_PIN_D3; arduinoPinState=PIND & _BV(3);
#endif
#endif // EI_ARDUINO_INTERRUPTED_PIN
  (*functionPointerArrayEXTERNAL[1])();
     3a4:	e0 91 bd 01 	lds	r30, 0x01BD	; 0x8001bd <functionPointerArrayEXTERNAL+0x2>
     3a8:	f0 91 be 01 	lds	r31, 0x01BE	; 0x8001be <functionPointerArrayEXTERNAL+0x3>
     3ac:	09 95       	icall
#ifdef INTERRUPT_FLAG_PIN3
  INTERRUPT_FLAG_PIN3++;
#endif
#endif
#endif // NEEDFORSPEED
}/*}}}*/
     3ae:	ff 91       	pop	r31
     3b0:	ef 91       	pop	r30
     3b2:	bf 91       	pop	r27
     3b4:	af 91       	pop	r26
     3b6:	9f 91       	pop	r25
     3b8:	8f 91       	pop	r24
     3ba:	7f 91       	pop	r23
     3bc:	6f 91       	pop	r22
     3be:	5f 91       	pop	r21
     3c0:	4f 91       	pop	r20
     3c2:	3f 91       	pop	r19
     3c4:	2f 91       	pop	r18
     3c6:	0f 90       	pop	r0
     3c8:	0f be       	out	0x3f, r0	; 63
     3ca:	0f 90       	pop	r0
     3cc:	1f 90       	pop	r1
     3ce:	18 95       	reti

000003d0 <__vector_3>:
  // exitPORTBISR: PORTC &= ~(1 << PC5); // SIGNAL THAT WE ARE LEAVING THE INTERRUPT
}/*}}}*/
#endif // EI_NOTPORTA

#ifndef EI_NOTPORTB
ISR(PORTB_VECT) {/*{{{*/
     3d0:	1f 92       	push	r1
     3d2:	0f 92       	push	r0
     3d4:	0f b6       	in	r0, 0x3f	; 63
     3d6:	0f 92       	push	r0
     3d8:	11 24       	eor	r1, r1
     3da:	2f 93       	push	r18
     3dc:	3f 93       	push	r19
     3de:	4f 93       	push	r20
     3e0:	5f 93       	push	r21
     3e2:	6f 93       	push	r22
     3e4:	7f 93       	push	r23
     3e6:	8f 93       	push	r24
     3e8:	9f 93       	push	r25
     3ea:	af 93       	push	r26
     3ec:	bf 93       	push	r27
     3ee:	cf 93       	push	r28
     3f0:	ef 93       	push	r30
     3f2:	ff 93       	push	r31
  uint8_t current;
  uint8_t interruptMask;
  uint8_t changedPins;
  uint8_t tmp;

  current=PINB;
     3f4:	23 b1       	in	r18, 0x03	; 3
// If we trust the compiler to do this, it will use an extra register...
//  changedPins=(portSnapshotB ^ current) &
//                                       ((risingPinsPORTB & current) | (fallingPinsPORTB & ~current));
// ...so we do it ourselves:
  changedPins   = portSnapshotB ^ current;
     3f6:	c0 91 90 01 	lds	r28, 0x0190	; 0x800190 <_ZL13portSnapshotB>
  tmp           = risingPinsPORTB & current;
     3fa:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <risingPinsPORTB>
  interruptMask = fallingPinsPORTB & ~current;
     3fe:	90 91 91 01 	lds	r25, 0x0191	; 0x800191 <fallingPinsPORTB>
     402:	32 2f       	mov	r19, r18
     404:	30 95       	com	r19
     406:	93 23       	and	r25, r19
  interruptMask = interruptMask | tmp;
     408:	82 23       	and	r24, r18
     40a:	89 2b       	or	r24, r25
  interruptMask = PCMSK1 & interruptMask;
#else
#ifdef EI_ATTINY25
  interruptMask = PCMSK & interruptMask;
#else
  interruptMask = PCMSK0 & interruptMask;
     40c:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
     410:	c2 27       	eor	r28, r18
     412:	c9 23       	and	r28, r25
     414:	c8 23       	and	r28, r24
#endif
#endif

  portSnapshotB = current;
     416:	20 93 90 01 	sts	0x0190, r18	; 0x800190 <_ZL13portSnapshotB>
#ifdef NEEDFORSPEED
#include "utility/ei_portb_speed.h"
#else
  if (interruptMask == 0) goto exitPORTBISR; // get out quickly if not interested.
     41a:	cc 23       	and	r28, r28
     41c:	51 f1       	breq	.+84     	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
#if ! (defined ARDUINO_328) && ! (defined EI_ATTINY24) && ! (defined EI_ATTINY25)
  if (interruptMask & _BV(6)) { arduinoInterruptedPin=ARDUINO_PIN_B6; arduinoPinState=current & _BV(6); portBFunctions.pinSix(); }
  if (interruptMask & _BV(7)) { arduinoInterruptedPin=ARDUINO_PIN_B7; arduinoPinState=current & _BV(7); portBFunctions.pinSeven(); }
#endif
#else // EI_ARDUINO_INTERRUPTED_PIN
  if (interruptMask & _BV(0)) portBFunctions.pinZero();
     41e:	c0 ff       	sbrs	r28, 0
     420:	05 c0       	rjmp	.+10     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
     422:	e0 91 af 01 	lds	r30, 0x01AF	; 0x8001af <portBFunctions>
     426:	f0 91 b0 01 	lds	r31, 0x01B0	; 0x8001b0 <portBFunctions+0x1>
     42a:	09 95       	icall
  if (interruptMask & _BV(1)) portBFunctions.pinOne();
     42c:	c1 ff       	sbrs	r28, 1
     42e:	05 c0       	rjmp	.+10     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
     430:	e0 91 b1 01 	lds	r30, 0x01B1	; 0x8001b1 <portBFunctions+0x2>
     434:	f0 91 b2 01 	lds	r31, 0x01B2	; 0x8001b2 <portBFunctions+0x3>
     438:	09 95       	icall
  if (interruptMask & _BV(2)) portBFunctions.pinTwo();
     43a:	c2 ff       	sbrs	r28, 2
     43c:	05 c0       	rjmp	.+10     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
     43e:	e0 91 b3 01 	lds	r30, 0x01B3	; 0x8001b3 <portBFunctions+0x4>
     442:	f0 91 b4 01 	lds	r31, 0x01B4	; 0x8001b4 <portBFunctions+0x5>
     446:	09 95       	icall
  if (interruptMask & _BV(3)) portBFunctions.pinThree();
     448:	c3 ff       	sbrs	r28, 3
     44a:	05 c0       	rjmp	.+10     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
     44c:	e0 91 b5 01 	lds	r30, 0x01B5	; 0x8001b5 <portBFunctions+0x6>
     450:	f0 91 b6 01 	lds	r31, 0x01B6	; 0x8001b6 <portBFunctions+0x7>
     454:	09 95       	icall
#if ! (defined EI_ATTINY24)
  if (interruptMask & _BV(4)) portBFunctions.pinFour();
     456:	c4 ff       	sbrs	r28, 4
     458:	05 c0       	rjmp	.+10     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
     45a:	e0 91 b7 01 	lds	r30, 0x01B7	; 0x8001b7 <portBFunctions+0x8>
     45e:	f0 91 b8 01 	lds	r31, 0x01B8	; 0x8001b8 <portBFunctions+0x9>
     462:	09 95       	icall
  if (interruptMask & _BV(5)) portBFunctions.pinFive();
     464:	c5 ff       	sbrs	r28, 5
     466:	05 c0       	rjmp	.+10     	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
     468:	e0 91 b9 01 	lds	r30, 0x01B9	; 0x8001b9 <portBFunctions+0xa>
     46c:	f0 91 ba 01 	lds	r31, 0x01BA	; 0x8001ba <portBFunctions+0xb>
     470:	09 95       	icall
#endif // EI_ARDUINO_INTERRUPTED_PIN
  exitPORTBISR: return;
  // FOR MEASUREMENT ONLY
  // exitPORTBISR: PORTC &= ~(1 << PC5); // SIGNAL THAT WE ARE LEAVING THE INTERRUPT
#endif // NEEDFORSPEED
}/*}}}*/
     472:	ff 91       	pop	r31
     474:	ef 91       	pop	r30
     476:	cf 91       	pop	r28
     478:	bf 91       	pop	r27
     47a:	af 91       	pop	r26
     47c:	9f 91       	pop	r25
     47e:	8f 91       	pop	r24
     480:	7f 91       	pop	r23
     482:	6f 91       	pop	r22
     484:	5f 91       	pop	r21
     486:	4f 91       	pop	r20
     488:	3f 91       	pop	r19
     48a:	2f 91       	pop	r18
     48c:	0f 90       	pop	r0
     48e:	0f be       	out	0x3f, r0	; 63
     490:	0f 90       	pop	r0
     492:	1f 90       	pop	r1
     494:	18 95       	reti

00000496 <__vector_4>:
#endif // EI_NOTPORTB

#ifndef EI_NOTPORTC
ISR(PORTC_VECT) {/*{{{*/
     496:	1f 92       	push	r1
     498:	0f 92       	push	r0
     49a:	0f b6       	in	r0, 0x3f	; 63
     49c:	0f 92       	push	r0
     49e:	11 24       	eor	r1, r1
     4a0:	2f 93       	push	r18
     4a2:	3f 93       	push	r19
     4a4:	4f 93       	push	r20
     4a6:	5f 93       	push	r21
     4a8:	6f 93       	push	r22
     4aa:	7f 93       	push	r23
     4ac:	8f 93       	push	r24
     4ae:	9f 93       	push	r25
     4b0:	af 93       	push	r26
     4b2:	bf 93       	push	r27
     4b4:	cf 93       	push	r28
     4b6:	ef 93       	push	r30
     4b8:	ff 93       	push	r31
  uint8_t current;
  uint8_t interruptMask;
  uint8_t changedPins;
  uint8_t tmp;

  current=PINC;
     4ba:	26 b1       	in	r18, 0x06	; 6
// If we trust the compiler to do this, it will use an extra register...
//  changedPins=(portSnapshotB ^ current) &
//                                       ((risingPinsPORTB & current) | (fallingPinsPORTB & ~current));
// ...so we do it ourselves:
  changedPins   = portSnapshotC ^ current;
     4bc:	c0 91 8d 01 	lds	r28, 0x018D	; 0x80018d <_ZL13portSnapshotC>
  tmp           = risingPinsPORTC & current;
     4c0:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <risingPinsPORTC>
  interruptMask = fallingPinsPORTC & ~current;
     4c4:	90 91 8e 01 	lds	r25, 0x018E	; 0x80018e <fallingPinsPORTC>
     4c8:	32 2f       	mov	r19, r18
     4ca:	30 95       	com	r19
     4cc:	93 23       	and	r25, r19
  interruptMask = interruptMask | tmp;
     4ce:	82 23       	and	r24, r18
     4d0:	89 2b       	or	r24, r25
  interruptMask = changedPins & interruptMask;
#if (defined MIGHTY1284)
  interruptMask = PCMSK2 & interruptMask;
#else
  interruptMask = PCMSK1 & interruptMask;
     4d2:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <__TEXT_REGION_LENGTH__+0x7e006c>
     4d6:	c2 27       	eor	r28, r18
     4d8:	c9 23       	and	r28, r25
     4da:	c8 23       	and	r28, r24
#endif

  portSnapshotC = current;
     4dc:	20 93 8d 01 	sts	0x018D, r18	; 0x80018d <_ZL13portSnapshotC>
#ifdef NEEDFORSPEED
#include "utility/ei_portc_speed.h"
#else
  if (interruptMask == 0) goto exitPORTCISR; // get out quickly if not interested.
     4e0:	cc 23       	and	r28, r28
     4e2:	51 f1       	breq	.+84     	; 0x538 <__vector_4+0xa2>
#ifdef MIGHTY1284
  if (interruptMask & _BV(6)) { arduinoInterruptedPin=ARDUINO_PIN_C6; arduinoPinState=current & _BV(6); portCFunctions.pinSix(); }
  if (interruptMask & _BV(7)) { arduinoInterruptedPin=ARDUINO_PIN_C7; arduinoPinState=current & _BV(7); portCFunctions.pinSeven(); }
#endif
#else
  if (interruptMask & _BV(0)) portCFunctions.pinZero();
     4e4:	c0 ff       	sbrs	r28, 0
     4e6:	05 c0       	rjmp	.+10     	; 0x4f2 <__vector_4+0x5c>
     4e8:	e0 91 a3 01 	lds	r30, 0x01A3	; 0x8001a3 <portCFunctions>
     4ec:	f0 91 a4 01 	lds	r31, 0x01A4	; 0x8001a4 <portCFunctions+0x1>
     4f0:	09 95       	icall
  if (interruptMask & _BV(1)) portCFunctions.pinOne();
     4f2:	c1 ff       	sbrs	r28, 1
     4f4:	05 c0       	rjmp	.+10     	; 0x500 <__vector_4+0x6a>
     4f6:	e0 91 a5 01 	lds	r30, 0x01A5	; 0x8001a5 <portCFunctions+0x2>
     4fa:	f0 91 a6 01 	lds	r31, 0x01A6	; 0x8001a6 <portCFunctions+0x3>
     4fe:	09 95       	icall
  if (interruptMask & _BV(2)) portCFunctions.pinTwo();
     500:	c2 ff       	sbrs	r28, 2
     502:	05 c0       	rjmp	.+10     	; 0x50e <__vector_4+0x78>
     504:	e0 91 a7 01 	lds	r30, 0x01A7	; 0x8001a7 <portCFunctions+0x4>
     508:	f0 91 a8 01 	lds	r31, 0x01A8	; 0x8001a8 <portCFunctions+0x5>
     50c:	09 95       	icall
  if (interruptMask & _BV(3)) portCFunctions.pinThree();
     50e:	c3 ff       	sbrs	r28, 3
     510:	05 c0       	rjmp	.+10     	; 0x51c <__vector_4+0x86>
     512:	e0 91 a9 01 	lds	r30, 0x01A9	; 0x8001a9 <portCFunctions+0x6>
     516:	f0 91 aa 01 	lds	r31, 0x01AA	; 0x8001aa <portCFunctions+0x7>
     51a:	09 95       	icall
  if (interruptMask & _BV(4)) portCFunctions.pinFour();
     51c:	c4 ff       	sbrs	r28, 4
     51e:	05 c0       	rjmp	.+10     	; 0x52a <__vector_4+0x94>
     520:	e0 91 ab 01 	lds	r30, 0x01AB	; 0x8001ab <portCFunctions+0x8>
     524:	f0 91 ac 01 	lds	r31, 0x01AC	; 0x8001ac <portCFunctions+0x9>
     528:	09 95       	icall
  if (interruptMask & _BV(5)) portCFunctions.pinFive();
     52a:	c5 ff       	sbrs	r28, 5
     52c:	05 c0       	rjmp	.+10     	; 0x538 <__vector_4+0xa2>
     52e:	e0 91 ad 01 	lds	r30, 0x01AD	; 0x8001ad <portCFunctions+0xa>
     532:	f0 91 ae 01 	lds	r31, 0x01AE	; 0x8001ae <portCFunctions+0xb>
     536:	09 95       	icall
  if (interruptMask & _BV(7)) portCFunctions.pinSeven();
#endif
#endif // EI_ARDUINO_INTERRUPTED_PIN
  exitPORTCISR: return;
#endif // NEEDFORSPEED
}/*}}}*/
     538:	ff 91       	pop	r31
     53a:	ef 91       	pop	r30
     53c:	cf 91       	pop	r28
     53e:	bf 91       	pop	r27
     540:	af 91       	pop	r26
     542:	9f 91       	pop	r25
     544:	8f 91       	pop	r24
     546:	7f 91       	pop	r23
     548:	6f 91       	pop	r22
     54a:	5f 91       	pop	r21
     54c:	4f 91       	pop	r20
     54e:	3f 91       	pop	r19
     550:	2f 91       	pop	r18
     552:	0f 90       	pop	r0
     554:	0f be       	out	0x3f, r0	; 63
     556:	0f 90       	pop	r0
     558:	1f 90       	pop	r1
     55a:	18 95       	reti

0000055c <__vector_5>:
#endif // EI_NOTPORTC

#ifndef EI_NOTPORTD
ISR(PORTD_VECT) {/*{{{*/
     55c:	1f 92       	push	r1
     55e:	0f 92       	push	r0
     560:	0f b6       	in	r0, 0x3f	; 63
     562:	0f 92       	push	r0
     564:	11 24       	eor	r1, r1
     566:	2f 93       	push	r18
     568:	3f 93       	push	r19
     56a:	4f 93       	push	r20
     56c:	5f 93       	push	r21
     56e:	6f 93       	push	r22
     570:	7f 93       	push	r23
     572:	8f 93       	push	r24
     574:	9f 93       	push	r25
     576:	af 93       	push	r26
     578:	bf 93       	push	r27
     57a:	cf 93       	push	r28
     57c:	ef 93       	push	r30
     57e:	ff 93       	push	r31
  uint8_t current;
  uint8_t interruptMask;
  uint8_t changedPins;
  uint8_t tmp;

  current=PIND;
     580:	29 b1       	in	r18, 0x09	; 9
// If we trust the compiler to do this, it will use an extra register...
//  changedPins=(portSnapshotB ^ current) &
//                                       ((risingPinsPORTB & current) | (fallingPinsPORTB & ~current));
// ...so we do it ourselves:
  changedPins   = portSnapshotD ^ current;
     582:	c0 91 8a 01 	lds	r28, 0x018A	; 0x80018a <_ZL13portSnapshotD>
  tmp           = risingPinsPORTD & current;
     586:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <risingPinsPORTD>
  interruptMask = fallingPinsPORTD & ~current;
     58a:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <fallingPinsPORTD>
     58e:	32 2f       	mov	r19, r18
     590:	30 95       	com	r19
     592:	93 23       	and	r25, r19
  interruptMask = interruptMask | tmp;
     594:	82 23       	and	r24, r18
     596:	89 2b       	or	r24, r25
  interruptMask = changedPins & interruptMask;
#if (defined MIGHTY1284)
  interruptMask = PCMSK3 & interruptMask;
#else
  interruptMask = PCMSK2 & interruptMask;
     598:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <__TEXT_REGION_LENGTH__+0x7e006d>
     59c:	c2 27       	eor	r28, r18
     59e:	c9 23       	and	r28, r25
     5a0:	c8 23       	and	r28, r24
#endif

  portSnapshotD = current;
     5a2:	20 93 8a 01 	sts	0x018A, r18	; 0x80018a <_ZL13portSnapshotD>
#ifdef NEEDFORSPEED
#include "utility/ei_portd_speed.h"
#else
  if (interruptMask == 0) goto exitPORTDISR; // get out quickly if not interested.
     5a6:	cc 23       	and	r28, r28
     5a8:	c1 f1       	breq	.+112    	; 0x61a <__vector_5+0xbe>
  if (interruptMask & _BV(4)) { arduinoInterruptedPin=ARDUINO_PIN_D4; arduinoPinState=current & _BV(4); portDFunctions.pinFour(); }
  if (interruptMask & _BV(5)) { arduinoInterruptedPin=ARDUINO_PIN_D5; arduinoPinState=current & _BV(5); portDFunctions.pinFive(); }
  if (interruptMask & _BV(6)) { arduinoInterruptedPin=ARDUINO_PIN_D6; arduinoPinState=current & _BV(6); portDFunctions.pinSix(); }
  if (interruptMask & _BV(7)) { arduinoInterruptedPin=ARDUINO_PIN_D7; arduinoPinState=current & _BV(7); portDFunctions.pinSeven(); }
#else
  if (interruptMask & _BV(0)) portDFunctions.pinZero();
     5aa:	c0 ff       	sbrs	r28, 0
     5ac:	05 c0       	rjmp	.+10     	; 0x5b8 <__vector_5+0x5c>
     5ae:	e0 91 93 01 	lds	r30, 0x0193	; 0x800193 <portDFunctions>
     5b2:	f0 91 94 01 	lds	r31, 0x0194	; 0x800194 <portDFunctions+0x1>
     5b6:	09 95       	icall
  if (interruptMask & _BV(1)) portDFunctions.pinOne();
     5b8:	c1 ff       	sbrs	r28, 1
     5ba:	05 c0       	rjmp	.+10     	; 0x5c6 <__vector_5+0x6a>
     5bc:	e0 91 95 01 	lds	r30, 0x0195	; 0x800195 <portDFunctions+0x2>
     5c0:	f0 91 96 01 	lds	r31, 0x0196	; 0x800196 <portDFunctions+0x3>
     5c4:	09 95       	icall
  if (interruptMask & _BV(2)) portDFunctions.pinTwo();
     5c6:	c2 ff       	sbrs	r28, 2
     5c8:	05 c0       	rjmp	.+10     	; 0x5d4 <__vector_5+0x78>
     5ca:	e0 91 97 01 	lds	r30, 0x0197	; 0x800197 <portDFunctions+0x4>
     5ce:	f0 91 98 01 	lds	r31, 0x0198	; 0x800198 <portDFunctions+0x5>
     5d2:	09 95       	icall
  if (interruptMask & _BV(3)) portDFunctions.pinThree();
     5d4:	c3 ff       	sbrs	r28, 3
     5d6:	05 c0       	rjmp	.+10     	; 0x5e2 <__vector_5+0x86>
     5d8:	e0 91 99 01 	lds	r30, 0x0199	; 0x800199 <portDFunctions+0x6>
     5dc:	f0 91 9a 01 	lds	r31, 0x019A	; 0x80019a <portDFunctions+0x7>
     5e0:	09 95       	icall
  if (interruptMask & _BV(4)) portDFunctions.pinFour();
     5e2:	c4 ff       	sbrs	r28, 4
     5e4:	05 c0       	rjmp	.+10     	; 0x5f0 <__vector_5+0x94>
     5e6:	e0 91 9b 01 	lds	r30, 0x019B	; 0x80019b <portDFunctions+0x8>
     5ea:	f0 91 9c 01 	lds	r31, 0x019C	; 0x80019c <portDFunctions+0x9>
     5ee:	09 95       	icall
  if (interruptMask & _BV(5)) portDFunctions.pinFive();
     5f0:	c5 ff       	sbrs	r28, 5
     5f2:	05 c0       	rjmp	.+10     	; 0x5fe <__vector_5+0xa2>
     5f4:	e0 91 9d 01 	lds	r30, 0x019D	; 0x80019d <portDFunctions+0xa>
     5f8:	f0 91 9e 01 	lds	r31, 0x019E	; 0x80019e <portDFunctions+0xb>
     5fc:	09 95       	icall
  if (interruptMask & _BV(6)) portDFunctions.pinSix();
     5fe:	c6 ff       	sbrs	r28, 6
     600:	05 c0       	rjmp	.+10     	; 0x60c <__vector_5+0xb0>
     602:	e0 91 9f 01 	lds	r30, 0x019F	; 0x80019f <portDFunctions+0xc>
     606:	f0 91 a0 01 	lds	r31, 0x01A0	; 0x8001a0 <portDFunctions+0xd>
     60a:	09 95       	icall
  if (interruptMask & _BV(7)) portDFunctions.pinSeven();
     60c:	c7 ff       	sbrs	r28, 7
     60e:	05 c0       	rjmp	.+10     	; 0x61a <__vector_5+0xbe>
     610:	e0 91 a1 01 	lds	r30, 0x01A1	; 0x8001a1 <portDFunctions+0xe>
     614:	f0 91 a2 01 	lds	r31, 0x01A2	; 0x8001a2 <portDFunctions+0xf>
     618:	09 95       	icall
#endif // EI_ARDUINO_INTERRUPTED_PIN
  exitPORTDISR: return;
#endif // NEEDFORSPEED
}/*}}}*/
     61a:	ff 91       	pop	r31
     61c:	ef 91       	pop	r30
     61e:	cf 91       	pop	r28
     620:	bf 91       	pop	r27
     622:	af 91       	pop	r26
     624:	9f 91       	pop	r25
     626:	8f 91       	pop	r24
     628:	7f 91       	pop	r23
     62a:	6f 91       	pop	r22
     62c:	5f 91       	pop	r21
     62e:	4f 91       	pop	r20
     630:	3f 91       	pop	r19
     632:	2f 91       	pop	r18
     634:	0f 90       	pop	r0
     636:	0f be       	out	0x3f, r0	; 63
     638:	0f 90       	pop	r0
     63a:	1f 90       	pop	r1
     63c:	18 95       	reti

0000063e <_Z15switch_off_ledsv>:
	else						{	Pyro[3].Fall = true;	}
}


void switch_off_leds () {
	digitalWrite(Led_Feedback_C1, LOW);
     63e:	60 e0       	ldi	r22, 0x00	; 0
     640:	8a e0       	ldi	r24, 0x0A	; 10
     642:	0e 94 49 08 	call	0x1092	; 0x1092 <digitalWrite>
	digitalWrite(Led_Feedback_C2, LOW);
     646:	60 e0       	ldi	r22, 0x00	; 0
     648:	8b e0       	ldi	r24, 0x0B	; 11
     64a:	0e 94 49 08 	call	0x1092	; 0x1092 <digitalWrite>
	digitalWrite(Led_Feedback_C3, LOW);
     64e:	60 e0       	ldi	r22, 0x00	; 0
     650:	8c e0       	ldi	r24, 0x0C	; 12
     652:	0e 94 49 08 	call	0x1092	; 0x1092 <digitalWrite>
	digitalWrite(Led_Feedback_C4, LOW);
     656:	60 e0       	ldi	r22, 0x00	; 0
     658:	8d e0       	ldi	r24, 0x0D	; 13
     65a:	0e 94 49 08 	call	0x1092	; 0x1092 <digitalWrite>
	digitalWrite(Led_Feedback_L1, HIGH);
     65e:	61 e0       	ldi	r22, 0x01	; 1
     660:	80 e0       	ldi	r24, 0x00	; 0
     662:	0e 94 49 08 	call	0x1092	; 0x1092 <digitalWrite>
	digitalWrite(Led_Feedback_L2, HIGH);
     666:	61 e0       	ldi	r22, 0x01	; 1
     668:	81 e0       	ldi	r24, 0x01	; 1
     66a:	0e 94 49 08 	call	0x1092	; 0x1092 <digitalWrite>
	digitalWrite(Led_Feedback_L3, HIGH);
     66e:	61 e0       	ldi	r22, 0x01	; 1
     670:	82 e0       	ldi	r24, 0x02	; 2
     672:	0e 94 49 08 	call	0x1092	; 0x1092 <digitalWrite>
	digitalWrite(Led_Feedback_L4, HIGH);
     676:	61 e0       	ldi	r22, 0x01	; 1
     678:	83 e0       	ldi	r24, 0x03	; 3
     67a:	0c 94 49 08 	jmp	0x1092	; 0x1092 <digitalWrite>

0000067e <setup>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     67e:	26 e0       	ldi	r18, 0x06	; 6
     680:	40 e8       	ldi	r20, 0x80	; 128
     682:	55 e2       	ldi	r21, 0x25	; 37
     684:	60 e0       	ldi	r22, 0x00	; 0
     686:	70 e0       	ldi	r23, 0x00	; 0
     688:	81 ec       	ldi	r24, 0xC1	; 193
     68a:	91 e0       	ldi	r25, 0x01	; 1
     68c:	0e 94 59 05 	call	0xab2	; 0xab2 <_ZN14HardwareSerial5beginEmh>
void setup() {
	// start serial connection
	Serial.begin(9600);
  
	// Configure inputs en pull up
	pinMode(IN_PYRO_1, INPUT_PULLUP);
     690:	62 e0       	ldi	r22, 0x02	; 2
     692:	84 e0       	ldi	r24, 0x04	; 4
     694:	0e 94 0d 08 	call	0x101a	; 0x101a <pinMode>
	pinMode(IN_PYRO_2, INPUT_PULLUP);
     698:	62 e0       	ldi	r22, 0x02	; 2
     69a:	85 e0       	ldi	r24, 0x05	; 5
     69c:	0e 94 0d 08 	call	0x101a	; 0x101a <pinMode>
	pinMode(IN_PYRO_3, INPUT_PULLUP);
     6a0:	62 e0       	ldi	r22, 0x02	; 2
     6a2:	86 e0       	ldi	r24, 0x06	; 6
     6a4:	0e 94 0d 08 	call	0x101a	; 0x101a <pinMode>
	pinMode(IN_PYRO_4, INPUT_PULLUP);
     6a8:	62 e0       	ldi	r22, 0x02	; 2
     6aa:	87 e0       	ldi	r24, 0x07	; 7
     6ac:	0e 94 0d 08 	call	0x101a	; 0x101a <pinMode>
  
	// Configure interruptions
	enableInterrupt(IN_PYRO_1, Pyro_1_Interrupt, CHANGE);
     6b0:	41 e0       	ldi	r20, 0x01	; 1
     6b2:	66 e9       	ldi	r22, 0x96	; 150
     6b4:	70 e0       	ldi	r23, 0x00	; 0
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	0e 94 ca 00 	call	0x194	; 0x194 <_Z15enableInterrupthPFvvEh>
	enableInterrupt(IN_PYRO_2, Pyro_2_Interrupt, CHANGE);
     6bc:	41 e0       	ldi	r20, 0x01	; 1
     6be:	63 ea       	ldi	r22, 0xA3	; 163
     6c0:	70 e0       	ldi	r23, 0x00	; 0
     6c2:	85 e0       	ldi	r24, 0x05	; 5
     6c4:	0e 94 ca 00 	call	0x194	; 0x194 <_Z15enableInterrupthPFvvEh>
	enableInterrupt(IN_PYRO_3, Pyro_3_Interrupt, CHANGE);
     6c8:	41 e0       	ldi	r20, 0x01	; 1
     6ca:	60 eb       	ldi	r22, 0xB0	; 176
     6cc:	70 e0       	ldi	r23, 0x00	; 0
     6ce:	86 e0       	ldi	r24, 0x06	; 6
     6d0:	0e 94 ca 00 	call	0x194	; 0x194 <_Z15enableInterrupthPFvvEh>
	enableInterrupt(IN_PYRO_4, Pyro_4_Interrupt, CHANGE);
     6d4:	41 e0       	ldi	r20, 0x01	; 1
     6d6:	6d eb       	ldi	r22, 0xBD	; 189
     6d8:	70 e0       	ldi	r23, 0x00	; 0
     6da:	87 e0       	ldi	r24, 0x07	; 7
     6dc:	0e 94 ca 00 	call	0x194	; 0x194 <_Z15enableInterrupthPFvvEh>
	
	// Configure outputs pour feedback led
	switch_off_leds();
     6e0:	0e 94 1f 03 	call	0x63e	; 0x63e <_Z15switch_off_ledsv>
	pinMode(Led_Feedback_C1, OUTPUT);
     6e4:	61 e0       	ldi	r22, 0x01	; 1
     6e6:	8a e0       	ldi	r24, 0x0A	; 10
     6e8:	0e 94 0d 08 	call	0x101a	; 0x101a <pinMode>
	pinMode(Led_Feedback_C2, OUTPUT);
     6ec:	61 e0       	ldi	r22, 0x01	; 1
     6ee:	8b e0       	ldi	r24, 0x0B	; 11
     6f0:	0e 94 0d 08 	call	0x101a	; 0x101a <pinMode>
	pinMode(Led_Feedback_C3, OUTPUT);
     6f4:	61 e0       	ldi	r22, 0x01	; 1
     6f6:	8c e0       	ldi	r24, 0x0C	; 12
     6f8:	0e 94 0d 08 	call	0x101a	; 0x101a <pinMode>
	pinMode(Led_Feedback_C4, OUTPUT);
     6fc:	61 e0       	ldi	r22, 0x01	; 1
     6fe:	8d e0       	ldi	r24, 0x0D	; 13
     700:	0e 94 0d 08 	call	0x101a	; 0x101a <pinMode>
	pinMode(Led_Feedback_L1, OUTPUT);
     704:	61 e0       	ldi	r22, 0x01	; 1
     706:	80 e0       	ldi	r24, 0x00	; 0
     708:	0e 94 0d 08 	call	0x101a	; 0x101a <pinMode>
	pinMode(Led_Feedback_L2, OUTPUT);
     70c:	61 e0       	ldi	r22, 0x01	; 1
     70e:	81 e0       	ldi	r24, 0x01	; 1
     710:	0e 94 0d 08 	call	0x101a	; 0x101a <pinMode>
	pinMode(Led_Feedback_L3, OUTPUT);
     714:	61 e0       	ldi	r22, 0x01	; 1
     716:	82 e0       	ldi	r24, 0x02	; 2
     718:	0e 94 0d 08 	call	0x101a	; 0x101a <pinMode>
	pinMode(Led_Feedback_L4, OUTPUT);
     71c:	61 e0       	ldi	r22, 0x01	; 1
     71e:	83 e0       	ldi	r24, 0x03	; 3
     720:	0c 94 0d 08 	jmp	0x101a	; 0x101a <pinMode>

00000724 <loop>:
}

void loop() {
     724:	8f 92       	push	r8
     726:	9f 92       	push	r9
     728:	af 92       	push	r10
     72a:	bf 92       	push	r11
     72c:	cf 92       	push	r12
     72e:	df 92       	push	r13
     730:	ff 92       	push	r15
     732:	0f 93       	push	r16
     734:	1f 93       	push	r17
     736:	cf 93       	push	r28
     738:	df 93       	push	r29
     73a:	c6 e5       	ldi	r28, 0x56	; 86
     73c:	d1 e0       	ldi	r29, 0x01	; 1
     73e:	00 e0       	ldi	r16, 0x00	; 0
     740:	10 e0       	ldi	r17, 0x00	; 0
	
	for (i = 0; i < DefNbPyro; i++)
	{
		refresh = millis();
	
		if (Pyro[i].Rise == true)
     742:	8d e0       	ldi	r24, 0x0D	; 13
     744:	f8 2e       	mov	r15, r24
	unsigned char i, Ligne = Led_Feedback_L1;
	unsigned long refresh;
	
	for (i = 0; i < DefNbPyro; i++)
	{
		refresh = millis();
     746:	0e 94 9d 07 	call	0xf3a	; 0xf3a <millis>
	
		if (Pyro[i].Rise == true)
     74a:	f0 9e       	mul	r15, r16
     74c:	f0 01       	movw	r30, r0
     74e:	f1 9e       	mul	r15, r17
     750:	f0 0d       	add	r31, r0
     752:	11 24       	eor	r1, r1
     754:	ea 5a       	subi	r30, 0xAA	; 170
     756:	fe 4f       	sbci	r31, 0xFE	; 254
     758:	20 81       	ld	r18, Z
     75a:	22 23       	and	r18, r18
     75c:	d1 f0       	breq	.+52     	; 0x792 <loop+0x6e>
		{
			Pyro[i].RiseTime = refresh;
     75e:	6a 83       	std	Y+2, r22	; 0x02
     760:	7b 83       	std	Y+3, r23	; 0x03
     762:	8c 83       	std	Y+4, r24	; 0x04
     764:	9d 83       	std	Y+5, r25	; 0x05
			Pyro[i].Rise = false;
     766:	10 82       	st	Z, r1
		
			if ((Pyro[i].RiseTime - Pyro[i].FallTime) > IMPULSE_TIME)	{	Pyro[i].Count ++;	}
     768:	8e 80       	ldd	r8, Y+6	; 0x06
     76a:	9f 80       	ldd	r9, Y+7	; 0x07
     76c:	a8 84       	ldd	r10, Y+8	; 0x08
     76e:	b9 84       	ldd	r11, Y+9	; 0x09
     770:	9b 01       	movw	r18, r22
     772:	ac 01       	movw	r20, r24
     774:	28 19       	sub	r18, r8
     776:	39 09       	sbc	r19, r9
     778:	4a 09       	sbc	r20, r10
     77a:	5b 09       	sbc	r21, r11
     77c:	49 01       	movw	r8, r18
     77e:	5a 01       	movw	r10, r20
     780:	3f e1       	ldi	r19, 0x1F	; 31
     782:	83 16       	cp	r8, r19
     784:	91 04       	cpc	r9, r1
     786:	a1 04       	cpc	r10, r1
     788:	b1 04       	cpc	r11, r1
     78a:	18 f0       	brcs	.+6      	; 0x792 <loop+0x6e>
     78c:	2a 85       	ldd	r18, Y+10	; 0x0a
     78e:	2f 5f       	subi	r18, 0xFF	; 255
     790:	2a 87       	std	Y+10, r18	; 0x0a
		}
	
		if (Pyro[i].Fall == true)
     792:	f0 9e       	mul	r15, r16
     794:	f0 01       	movw	r30, r0
     796:	f1 9e       	mul	r15, r17
     798:	f0 0d       	add	r31, r0
     79a:	11 24       	eor	r1, r1
     79c:	ea 5a       	subi	r30, 0xAA	; 170
     79e:	fe 4f       	sbci	r31, 0xFE	; 254
     7a0:	21 81       	ldd	r18, Z+1	; 0x01
     7a2:	22 23       	and	r18, r18
     7a4:	b9 f0       	breq	.+46     	; 0x7d4 <loop+0xb0>
		{
			Pyro[i].FallTime = refresh;
     7a6:	6e 83       	std	Y+6, r22	; 0x06
     7a8:	7f 83       	std	Y+7, r23	; 0x07
     7aa:	88 87       	std	Y+8, r24	; 0x08
     7ac:	99 87       	std	Y+9, r25	; 0x09
			Pyro[i].Fall = false;
     7ae:	11 82       	std	Z+1, r1	; 0x01
		
			if ((Pyro[i].FallTime - Pyro[i].RiseTime) > MIN_IDLE_TIME)
     7b0:	8a 80       	ldd	r8, Y+2	; 0x02
     7b2:	9b 80       	ldd	r9, Y+3	; 0x03
     7b4:	ac 80       	ldd	r10, Y+4	; 0x04
     7b6:	bd 80       	ldd	r11, Y+5	; 0x05
     7b8:	dc 01       	movw	r26, r24
     7ba:	cb 01       	movw	r24, r22
     7bc:	88 19       	sub	r24, r8
     7be:	99 09       	sbc	r25, r9
     7c0:	aa 09       	sbc	r26, r10
     7c2:	bb 09       	sbc	r27, r11
     7c4:	85 36       	cpi	r24, 0x65	; 101
     7c6:	91 05       	cpc	r25, r1
     7c8:	a1 05       	cpc	r26, r1
     7ca:	b1 05       	cpc	r27, r1
     7cc:	18 f0       	brcs	.+6      	; 0x7d4 <loop+0xb0>
			{
				Pyro[i].Mode = (FireMode) Pyro[i].Count;
     7ce:	8a 85       	ldd	r24, Y+10	; 0x0a
     7d0:	8b 87       	std	Y+11, r24	; 0x0b
				Pyro[i].Count = 0;
     7d2:	1a 86       	std	Y+10, r1	; 0x0a
			}
		}
		
		// Envoi de mode en cours sur la RS
		if (Pyro[i].MemoMode != Pyro[i].Mode)
     7d4:	8b 85       	ldd	r24, Y+11	; 0x0b
     7d6:	9c 85       	ldd	r25, Y+12	; 0x0c
     7d8:	a8 01       	movw	r20, r16
     7da:	4f 5f       	subi	r20, 0xFF	; 255
     7dc:	5f 4f       	sbci	r21, 0xFF	; 255
     7de:	6a 01       	movw	r12, r20
     7e0:	98 17       	cp	r25, r24
     7e2:	51 f1       	breq	.+84     	; 0x838 <loop+0x114>
		{
			Pyro[i].MemoMode = Pyro[i].Mode;
     7e4:	8c 87       	std	Y+12, r24	; 0x0c
		
			Serial.print("Fire Mode Pyro_");
     7e6:	60 e0       	ldi	r22, 0x00	; 0
     7e8:	71 e0       	ldi	r23, 0x01	; 1
     7ea:	81 ec       	ldi	r24, 0xC1	; 193
     7ec:	91 e0       	ldi	r25, 0x01	; 1
     7ee:	0e 94 9c 06 	call	0xd38	; 0xd38 <_ZN5Print5printEPKc>
			Serial.print(i + 1);
     7f2:	4a e0       	ldi	r20, 0x0A	; 10
     7f4:	50 e0       	ldi	r21, 0x00	; 0
     7f6:	b6 01       	movw	r22, r12
     7f8:	81 ec       	ldi	r24, 0xC1	; 193
     7fa:	91 e0       	ldi	r25, 0x01	; 1
     7fc:	0e 94 4c 07 	call	0xe98	; 0xe98 <_ZN5Print5printEii>
			switch (Pyro[i].MemoMode)
     800:	8c 85       	ldd	r24, Y+12	; 0x0c
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	69 f0       	breq	.+26     	; 0x820 <loop+0xfc>
     806:	28 f4       	brcc	.+10     	; 0x812 <loop+0xee>
     808:	81 30       	cpi	r24, 0x01	; 1
     80a:	81 f4       	brne	.+32     	; 0x82c <loop+0x108>
			{
				case Fire_Armed:		Serial.println(": Armed");		break;
     80c:	60 e1       	ldi	r22, 0x10	; 16
     80e:	71 e0       	ldi	r23, 0x01	; 1
     810:	0f c0       	rjmp	.+30     	; 0x830 <loop+0x10c>
		{
			Pyro[i].MemoMode = Pyro[i].Mode;
		
			Serial.print("Fire Mode Pyro_");
			Serial.print(i + 1);
			switch (Pyro[i].MemoMode)
     812:	83 30       	cpi	r24, 0x03	; 3
     814:	41 f0       	breq	.+16     	; 0x826 <loop+0x102>
     816:	84 30       	cpi	r24, 0x04	; 4
     818:	49 f4       	brne	.+18     	; 0x82c <loop+0x108>
			{
				case Fire_Armed:		Serial.println(": Armed");		break;
				case Fire_Go:			Serial.println(": Go");			break;
				case Fire_Stop:			Serial.println(": Stop");		break;
				case Fire_End:			Serial.println(": End");		break;
     81a:	64 e2       	ldi	r22, 0x24	; 36
     81c:	71 e0       	ldi	r23, 0x01	; 1
     81e:	08 c0       	rjmp	.+16     	; 0x830 <loop+0x10c>
			Serial.print("Fire Mode Pyro_");
			Serial.print(i + 1);
			switch (Pyro[i].MemoMode)
			{
				case Fire_Armed:		Serial.println(": Armed");		break;
				case Fire_Go:			Serial.println(": Go");			break;
     820:	68 e1       	ldi	r22, 0x18	; 24
     822:	71 e0       	ldi	r23, 0x01	; 1
     824:	05 c0       	rjmp	.+10     	; 0x830 <loop+0x10c>
				case Fire_Stop:			Serial.println(": Stop");		break;
     826:	6d e1       	ldi	r22, 0x1D	; 29
     828:	71 e0       	ldi	r23, 0x01	; 1
     82a:	02 c0       	rjmp	.+4      	; 0x830 <loop+0x10c>
				case Fire_End:			Serial.println(": End");		break;
				case Fire_Undefined: 
				default:				Serial.println(": Unknown");	break;
     82c:	6a e2       	ldi	r22, 0x2A	; 42
     82e:	71 e0       	ldi	r23, 0x01	; 1
     830:	81 ec       	ldi	r24, 0xC1	; 193
     832:	91 e0       	ldi	r25, 0x01	; 1
     834:	0e 94 a9 06 	call	0xd52	; 0xd52 <_ZN5Print7printlnEPKc>
			}
		}
		
		// Gestion feedback led
		switch_off_leds();
     838:	0e 94 1f 03 	call	0x63e	; 0x63e <_Z15switch_off_ledsv>
		
		if (i == 0)			{	Ligne = Led_Feedback_L1;	}
     83c:	00 23       	and	r16, r16
     83e:	31 f0       	breq	.+12     	; 0x84c <loop+0x128>
		else if (i == 1)	{	Ligne = Led_Feedback_L2;	}
     840:	01 30       	cpi	r16, 0x01	; 1
     842:	31 f0       	breq	.+12     	; 0x850 <loop+0x12c>
		else if (i == 2)	{	Ligne = Led_Feedback_L3;	}
     844:	02 30       	cpi	r16, 0x02	; 2
     846:	31 f0       	breq	.+12     	; 0x854 <loop+0x130>
		else if (i == 3)	{	Ligne = Led_Feedback_L4;	}
     848:	83 e0       	ldi	r24, 0x03	; 3
     84a:	05 c0       	rjmp	.+10     	; 0x856 <loop+0x132>
		}
		
		// Gestion feedback led
		switch_off_leds();
		
		if (i == 0)			{	Ligne = Led_Feedback_L1;	}
     84c:	80 e0       	ldi	r24, 0x00	; 0
     84e:	03 c0       	rjmp	.+6      	; 0x856 <loop+0x132>
		else if (i == 1)	{	Ligne = Led_Feedback_L2;	}
     850:	81 e0       	ldi	r24, 0x01	; 1
     852:	01 c0       	rjmp	.+2      	; 0x856 <loop+0x132>
		else if (i == 2)	{	Ligne = Led_Feedback_L3;	}
     854:	82 e0       	ldi	r24, 0x02	; 2
		else if (i == 3)	{	Ligne = Led_Feedback_L4;	}
			
		switch (Pyro[i].Mode)
     856:	9b 85       	ldd	r25, Y+11	; 0x0b
     858:	92 30       	cpi	r25, 0x02	; 2
     85a:	99 f0       	breq	.+38     	; 0x882 <loop+0x15e>
     85c:	40 f4       	brcc	.+16     	; 0x86e <loop+0x14a>
     85e:	91 30       	cpi	r25, 0x01	; 1
     860:	e9 f4       	brne	.+58     	; 0x89c <loop+0x178>
		{
			case Fire_Armed:	digitalWrite(Ligne, LOW);	digitalWrite(Led_Feedback_C1, HIGH);	break;
     862:	60 e0       	ldi	r22, 0x00	; 0
     864:	0e 94 49 08 	call	0x1092	; 0x1092 <digitalWrite>
     868:	61 e0       	ldi	r22, 0x01	; 1
     86a:	8a e0       	ldi	r24, 0x0A	; 10
     86c:	15 c0       	rjmp	.+42     	; 0x898 <loop+0x174>
		if (i == 0)			{	Ligne = Led_Feedback_L1;	}
		else if (i == 1)	{	Ligne = Led_Feedback_L2;	}
		else if (i == 2)	{	Ligne = Led_Feedback_L3;	}
		else if (i == 3)	{	Ligne = Led_Feedback_L4;	}
			
		switch (Pyro[i].Mode)
     86e:	93 30       	cpi	r25, 0x03	; 3
     870:	71 f0       	breq	.+28     	; 0x88e <loop+0x16a>
     872:	94 30       	cpi	r25, 0x04	; 4
     874:	99 f4       	brne	.+38     	; 0x89c <loop+0x178>
		{
			case Fire_Armed:	digitalWrite(Ligne, LOW);	digitalWrite(Led_Feedback_C1, HIGH);	break;
			case Fire_Go:		digitalWrite(Ligne, LOW);	digitalWrite(Led_Feedback_C2, HIGH);	break;
			case Fire_Stop:		digitalWrite(Ligne, LOW);	digitalWrite(Led_Feedback_C3, HIGH);	break;
			case Fire_End:		digitalWrite(Ligne, LOW);	digitalWrite(Led_Feedback_C4, HIGH);	break;
     876:	60 e0       	ldi	r22, 0x00	; 0
     878:	0e 94 49 08 	call	0x1092	; 0x1092 <digitalWrite>
     87c:	61 e0       	ldi	r22, 0x01	; 1
     87e:	8d e0       	ldi	r24, 0x0D	; 13
     880:	0b c0       	rjmp	.+22     	; 0x898 <loop+0x174>
		else if (i == 3)	{	Ligne = Led_Feedback_L4;	}
			
		switch (Pyro[i].Mode)
		{
			case Fire_Armed:	digitalWrite(Ligne, LOW);	digitalWrite(Led_Feedback_C1, HIGH);	break;
			case Fire_Go:		digitalWrite(Ligne, LOW);	digitalWrite(Led_Feedback_C2, HIGH);	break;
     882:	60 e0       	ldi	r22, 0x00	; 0
     884:	0e 94 49 08 	call	0x1092	; 0x1092 <digitalWrite>
     888:	61 e0       	ldi	r22, 0x01	; 1
     88a:	8b e0       	ldi	r24, 0x0B	; 11
     88c:	05 c0       	rjmp	.+10     	; 0x898 <loop+0x174>
			case Fire_Stop:		digitalWrite(Ligne, LOW);	digitalWrite(Led_Feedback_C3, HIGH);	break;
     88e:	60 e0       	ldi	r22, 0x00	; 0
     890:	0e 94 49 08 	call	0x1092	; 0x1092 <digitalWrite>
     894:	61 e0       	ldi	r22, 0x01	; 1
     896:	8c e0       	ldi	r24, 0x0C	; 12
			case Fire_End:		digitalWrite(Ligne, LOW);	digitalWrite(Led_Feedback_C4, HIGH);	break;
     898:	0e 94 49 08 	call	0x1092	; 0x1092 <digitalWrite>
		}
		
		// Gestion time out en cas de perte de signal
		if ((millis() - Pyro[i].RiseTime) > TIME_OUT_FB)	{	Pyro[i].Mode = Fire_Undefined;	}
     89c:	0e 94 9d 07 	call	0xf3a	; 0xf3a <millis>
     8a0:	0a 81       	ldd	r16, Y+2	; 0x02
     8a2:	1b 81       	ldd	r17, Y+3	; 0x03
     8a4:	2c 81       	ldd	r18, Y+4	; 0x04
     8a6:	3d 81       	ldd	r19, Y+5	; 0x05
     8a8:	dc 01       	movw	r26, r24
     8aa:	cb 01       	movw	r24, r22
     8ac:	80 1b       	sub	r24, r16
     8ae:	91 0b       	sbc	r25, r17
     8b0:	a2 0b       	sbc	r26, r18
     8b2:	b3 0b       	sbc	r27, r19
     8b4:	89 3e       	cpi	r24, 0xE9	; 233
     8b6:	93 40       	sbci	r25, 0x03	; 3
     8b8:	a1 05       	cpc	r26, r1
     8ba:	b1 05       	cpc	r27, r1
     8bc:	08 f0       	brcs	.+2      	; 0x8c0 <loop+0x19c>
     8be:	1b 86       	std	Y+11, r1	; 0x0b
		if ((millis() - Pyro[i].FallTime) > TIME_OUT_FB)	{	Pyro[i].Mode = Fire_Undefined;	}
     8c0:	0e 94 9d 07 	call	0xf3a	; 0xf3a <millis>
     8c4:	0e 81       	ldd	r16, Y+6	; 0x06
     8c6:	1f 81       	ldd	r17, Y+7	; 0x07
     8c8:	28 85       	ldd	r18, Y+8	; 0x08
     8ca:	39 85       	ldd	r19, Y+9	; 0x09
     8cc:	dc 01       	movw	r26, r24
     8ce:	cb 01       	movw	r24, r22
     8d0:	80 1b       	sub	r24, r16
     8d2:	91 0b       	sbc	r25, r17
     8d4:	a2 0b       	sbc	r26, r18
     8d6:	b3 0b       	sbc	r27, r19
     8d8:	89 3e       	cpi	r24, 0xE9	; 233
     8da:	93 40       	sbci	r25, 0x03	; 3
     8dc:	a1 05       	cpc	r26, r1
     8de:	b1 05       	cpc	r27, r1
     8e0:	08 f0       	brcs	.+2      	; 0x8e4 <loop+0x1c0>
     8e2:	1b 86       	std	Y+11, r1	; 0x0b
     8e4:	86 01       	movw	r16, r12
     8e6:	2d 96       	adiw	r28, 0x0d	; 13

void loop() {
	unsigned char i, Ligne = Led_Feedback_L1;
	unsigned long refresh;
	
	for (i = 0; i < DefNbPyro; i++)
     8e8:	04 30       	cpi	r16, 0x04	; 4
     8ea:	11 05       	cpc	r17, r1
     8ec:	09 f0       	breq	.+2      	; 0x8f0 <loop+0x1cc>
     8ee:	2b cf       	rjmp	.-426    	; 0x746 <loop+0x22>
		
		// Gestion time out en cas de perte de signal
		if ((millis() - Pyro[i].RiseTime) > TIME_OUT_FB)	{	Pyro[i].Mode = Fire_Undefined;	}
		if ((millis() - Pyro[i].FallTime) > TIME_OUT_FB)	{	Pyro[i].Mode = Fire_Undefined;	}
	}
}
     8f0:	df 91       	pop	r29
     8f2:	cf 91       	pop	r28
     8f4:	1f 91       	pop	r17
     8f6:	0f 91       	pop	r16
     8f8:	ff 90       	pop	r15
     8fa:	df 90       	pop	r13
     8fc:	cf 90       	pop	r12
     8fe:	bf 90       	pop	r11
     900:	af 90       	pop	r10
     902:	9f 90       	pop	r9
     904:	8f 90       	pop	r8
     906:	08 95       	ret

00000908 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     908:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     90a:	91 8d       	ldd	r25, Z+25	; 0x19
     90c:	22 8d       	ldd	r18, Z+26	; 0x1a
     90e:	89 2f       	mov	r24, r25
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	80 5c       	subi	r24, 0xC0	; 192
     914:	9f 4f       	sbci	r25, 0xFF	; 255
     916:	82 1b       	sub	r24, r18
     918:	91 09       	sbc	r25, r1
}
     91a:	8f 73       	andi	r24, 0x3F	; 63
     91c:	99 27       	eor	r25, r25
     91e:	08 95       	ret

00000920 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     920:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     922:	91 8d       	ldd	r25, Z+25	; 0x19
     924:	82 8d       	ldd	r24, Z+26	; 0x1a
     926:	98 17       	cp	r25, r24
     928:	31 f0       	breq	.+12     	; 0x936 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     92a:	82 8d       	ldd	r24, Z+26	; 0x1a
     92c:	e8 0f       	add	r30, r24
     92e:	f1 1d       	adc	r31, r1
     930:	85 8d       	ldd	r24, Z+29	; 0x1d
     932:	90 e0       	ldi	r25, 0x00	; 0
     934:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     936:	8f ef       	ldi	r24, 0xFF	; 255
     938:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     93a:	08 95       	ret

0000093c <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     93c:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     93e:	91 8d       	ldd	r25, Z+25	; 0x19
     940:	82 8d       	ldd	r24, Z+26	; 0x1a
     942:	98 17       	cp	r25, r24
     944:	61 f0       	breq	.+24     	; 0x95e <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     946:	82 8d       	ldd	r24, Z+26	; 0x1a
     948:	df 01       	movw	r26, r30
     94a:	a8 0f       	add	r26, r24
     94c:	b1 1d       	adc	r27, r1
     94e:	5d 96       	adiw	r26, 0x1d	; 29
     950:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     952:	92 8d       	ldd	r25, Z+26	; 0x1a
     954:	9f 5f       	subi	r25, 0xFF	; 255
     956:	9f 73       	andi	r25, 0x3F	; 63
     958:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     95a:	90 e0       	ldi	r25, 0x00	; 0
     95c:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     95e:	8f ef       	ldi	r24, 0xFF	; 255
     960:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     962:	08 95       	ret

00000964 <_ZN14HardwareSerial17availableForWriteEv>:
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
     964:	fc 01       	movw	r30, r24
     966:	53 8d       	ldd	r21, Z+27	; 0x1b
  tx_buffer_index_t tail = _tx_buffer_tail;
     968:	44 8d       	ldd	r20, Z+28	; 0x1c
     96a:	25 2f       	mov	r18, r21
     96c:	30 e0       	ldi	r19, 0x00	; 0
     96e:	84 2f       	mov	r24, r20
     970:	90 e0       	ldi	r25, 0x00	; 0
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     972:	82 1b       	sub	r24, r18
     974:	93 0b       	sbc	r25, r19
     976:	54 17       	cp	r21, r20
     978:	10 f0       	brcs	.+4      	; 0x97e <_ZN14HardwareSerial17availableForWriteEv+0x1a>
     97a:	cf 96       	adiw	r24, 0x3f	; 63
     97c:	08 95       	ret
  return tail - head - 1;
     97e:	01 97       	sbiw	r24, 0x01	; 1
}
     980:	08 95       	ret

00000982 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     982:	86 e1       	ldi	r24, 0x16	; 22
     984:	96 e0       	ldi	r25, 0x06	; 6
     986:	89 2b       	or	r24, r25
     988:	49 f0       	breq	.+18     	; 0x99c <_Z14serialEventRunv+0x1a>
     98a:	80 e0       	ldi	r24, 0x00	; 0
     98c:	90 e0       	ldi	r25, 0x00	; 0
     98e:	89 2b       	or	r24, r25
     990:	29 f0       	breq	.+10     	; 0x99c <_Z14serialEventRunv+0x1a>
     992:	0e 94 16 06 	call	0xc2c	; 0xc2c <_Z17Serial0_availablev>
     996:	81 11       	cpse	r24, r1
     998:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
     99c:	08 95       	ret

0000099e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     99e:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     9a0:	84 8d       	ldd	r24, Z+28	; 0x1c
     9a2:	df 01       	movw	r26, r30
     9a4:	a8 0f       	add	r26, r24
     9a6:	b1 1d       	adc	r27, r1
     9a8:	a3 5a       	subi	r26, 0xA3	; 163
     9aa:	bf 4f       	sbci	r27, 0xFF	; 255
     9ac:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     9ae:	84 8d       	ldd	r24, Z+28	; 0x1c
     9b0:	90 e0       	ldi	r25, 0x00	; 0
     9b2:	01 96       	adiw	r24, 0x01	; 1
     9b4:	8f 73       	andi	r24, 0x3F	; 63
     9b6:	99 27       	eor	r25, r25
     9b8:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
     9ba:	a6 89       	ldd	r26, Z+22	; 0x16
     9bc:	b7 89       	ldd	r27, Z+23	; 0x17
     9be:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
     9c0:	a0 89       	ldd	r26, Z+16	; 0x10
     9c2:	b1 89       	ldd	r27, Z+17	; 0x11
     9c4:	8c 91       	ld	r24, X
     9c6:	80 64       	ori	r24, 0x40	; 64
     9c8:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
     9ca:	93 8d       	ldd	r25, Z+27	; 0x1b
     9cc:	84 8d       	ldd	r24, Z+28	; 0x1c
     9ce:	98 13       	cpse	r25, r24
     9d0:	06 c0       	rjmp	.+12     	; 0x9de <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     9d2:	02 88       	ldd	r0, Z+18	; 0x12
     9d4:	f3 89       	ldd	r31, Z+19	; 0x13
     9d6:	e0 2d       	mov	r30, r0
     9d8:	80 81       	ld	r24, Z
     9da:	8f 7d       	andi	r24, 0xDF	; 223
     9dc:	80 83       	st	Z, r24
     9de:	08 95       	ret

000009e0 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
     9e0:	ef 92       	push	r14
     9e2:	ff 92       	push	r15
     9e4:	0f 93       	push	r16
     9e6:	1f 93       	push	r17
     9e8:	cf 93       	push	r28
     9ea:	df 93       	push	r29
     9ec:	ec 01       	movw	r28, r24
  _written = true;
     9ee:	81 e0       	ldi	r24, 0x01	; 1
     9f0:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     9f2:	9b 8d       	ldd	r25, Y+27	; 0x1b
     9f4:	8c 8d       	ldd	r24, Y+28	; 0x1c
     9f6:	98 13       	cpse	r25, r24
     9f8:	05 c0       	rjmp	.+10     	; 0xa04 <_ZN14HardwareSerial5writeEh+0x24>
     9fa:	e8 89       	ldd	r30, Y+16	; 0x10
     9fc:	f9 89       	ldd	r31, Y+17	; 0x11
     9fe:	80 81       	ld	r24, Z
     a00:	85 fd       	sbrc	r24, 5
     a02:	24 c0       	rjmp	.+72     	; 0xa4c <_ZN14HardwareSerial5writeEh+0x6c>
     a04:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     a06:	0b 8d       	ldd	r16, Y+27	; 0x1b
     a08:	10 e0       	ldi	r17, 0x00	; 0
     a0a:	0f 5f       	subi	r16, 0xFF	; 255
     a0c:	1f 4f       	sbci	r17, 0xFF	; 255
     a0e:	0f 73       	andi	r16, 0x3F	; 63
     a10:	11 27       	eor	r17, r17
     a12:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     a14:	8c 8d       	ldd	r24, Y+28	; 0x1c
     a16:	e8 12       	cpse	r14, r24
     a18:	0c c0       	rjmp	.+24     	; 0xa32 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
     a1a:	0f b6       	in	r0, 0x3f	; 63
     a1c:	07 fc       	sbrc	r0, 7
     a1e:	fa cf       	rjmp	.-12     	; 0xa14 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     a20:	e8 89       	ldd	r30, Y+16	; 0x10
     a22:	f9 89       	ldd	r31, Y+17	; 0x11
     a24:	80 81       	ld	r24, Z
     a26:	85 ff       	sbrs	r24, 5
     a28:	f5 cf       	rjmp	.-22     	; 0xa14 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
     a2a:	ce 01       	movw	r24, r28
     a2c:	0e 94 cf 04 	call	0x99e	; 0x99e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     a30:	f1 cf       	rjmp	.-30     	; 0xa14 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     a32:	8b 8d       	ldd	r24, Y+27	; 0x1b
     a34:	fe 01       	movw	r30, r28
     a36:	e8 0f       	add	r30, r24
     a38:	f1 1d       	adc	r31, r1
     a3a:	e3 5a       	subi	r30, 0xA3	; 163
     a3c:	ff 4f       	sbci	r31, 0xFF	; 255
     a3e:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
     a40:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
     a42:	ea 89       	ldd	r30, Y+18	; 0x12
     a44:	fb 89       	ldd	r31, Y+19	; 0x13
     a46:	80 81       	ld	r24, Z
     a48:	80 62       	ori	r24, 0x20	; 32
     a4a:	07 c0       	rjmp	.+14     	; 0xa5a <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
     a4c:	ee 89       	ldd	r30, Y+22	; 0x16
     a4e:	ff 89       	ldd	r31, Y+23	; 0x17
     a50:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
     a52:	e8 89       	ldd	r30, Y+16	; 0x10
     a54:	f9 89       	ldd	r31, Y+17	; 0x11
     a56:	80 81       	ld	r24, Z
     a58:	80 64       	ori	r24, 0x40	; 64
     a5a:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	90 e0       	ldi	r25, 0x00	; 0
     a60:	df 91       	pop	r29
     a62:	cf 91       	pop	r28
     a64:	1f 91       	pop	r17
     a66:	0f 91       	pop	r16
     a68:	ff 90       	pop	r15
     a6a:	ef 90       	pop	r14
     a6c:	08 95       	ret

00000a6e <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     a6e:	cf 93       	push	r28
     a70:	df 93       	push	r29
     a72:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     a74:	88 8d       	ldd	r24, Y+24	; 0x18
     a76:	88 23       	and	r24, r24
     a78:	c9 f0       	breq	.+50     	; 0xaac <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     a7a:	ea 89       	ldd	r30, Y+18	; 0x12
     a7c:	fb 89       	ldd	r31, Y+19	; 0x13
     a7e:	80 81       	ld	r24, Z
     a80:	85 fd       	sbrc	r24, 5
     a82:	05 c0       	rjmp	.+10     	; 0xa8e <_ZN14HardwareSerial5flushEv+0x20>
     a84:	a8 89       	ldd	r26, Y+16	; 0x10
     a86:	b9 89       	ldd	r27, Y+17	; 0x11
     a88:	8c 91       	ld	r24, X
     a8a:	86 fd       	sbrc	r24, 6
     a8c:	0f c0       	rjmp	.+30     	; 0xaac <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     a8e:	0f b6       	in	r0, 0x3f	; 63
     a90:	07 fc       	sbrc	r0, 7
     a92:	f5 cf       	rjmp	.-22     	; 0xa7e <_ZN14HardwareSerial5flushEv+0x10>
     a94:	80 81       	ld	r24, Z
     a96:	85 ff       	sbrs	r24, 5
     a98:	f2 cf       	rjmp	.-28     	; 0xa7e <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     a9a:	a8 89       	ldd	r26, Y+16	; 0x10
     a9c:	b9 89       	ldd	r27, Y+17	; 0x11
     a9e:	8c 91       	ld	r24, X
     aa0:	85 ff       	sbrs	r24, 5
     aa2:	ed cf       	rjmp	.-38     	; 0xa7e <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
     aa4:	ce 01       	movw	r24, r28
     aa6:	0e 94 cf 04 	call	0x99e	; 0x99e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     aaa:	e7 cf       	rjmp	.-50     	; 0xa7a <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     aac:	df 91       	pop	r29
     aae:	cf 91       	pop	r28
     ab0:	08 95       	ret

00000ab2 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
     ab2:	cf 92       	push	r12
     ab4:	df 92       	push	r13
     ab6:	ef 92       	push	r14
     ab8:	ff 92       	push	r15
     aba:	1f 93       	push	r17
     abc:	cf 93       	push	r28
     abe:	df 93       	push	r29
     ac0:	ec 01       	movw	r28, r24
     ac2:	6a 01       	movw	r12, r20
     ac4:	7b 01       	movw	r14, r22
     ac6:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     ac8:	e8 89       	ldd	r30, Y+16	; 0x10
     aca:	f9 89       	ldd	r31, Y+17	; 0x11
     acc:	82 e0       	ldi	r24, 0x02	; 2
     ace:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     ad0:	41 15       	cp	r20, r1
     ad2:	51 4e       	sbci	r21, 0xE1	; 225
     ad4:	61 05       	cpc	r22, r1
     ad6:	71 05       	cpc	r23, r1
     ad8:	b1 f0       	breq	.+44     	; 0xb06 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
     ada:	60 e0       	ldi	r22, 0x00	; 0
     adc:	79 e0       	ldi	r23, 0x09	; 9
     ade:	8d e3       	ldi	r24, 0x3D	; 61
     ae0:	90 e0       	ldi	r25, 0x00	; 0
     ae2:	a7 01       	movw	r20, r14
     ae4:	96 01       	movw	r18, r12
     ae6:	0e 94 a1 08 	call	0x1142	; 0x1142 <__udivmodsi4>
     aea:	da 01       	movw	r26, r20
     aec:	c9 01       	movw	r24, r18
     aee:	01 97       	sbiw	r24, 0x01	; 1
     af0:	a1 09       	sbc	r26, r1
     af2:	b1 09       	sbc	r27, r1
     af4:	b6 95       	lsr	r27
     af6:	a7 95       	ror	r26
     af8:	97 95       	ror	r25
     afa:	87 95       	ror	r24
     afc:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     afe:	21 15       	cp	r18, r1
     b00:	80 e1       	ldi	r24, 0x10	; 16
     b02:	38 07       	cpc	r19, r24
     b04:	a8 f0       	brcs	.+42     	; 0xb30 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
     b06:	e8 89       	ldd	r30, Y+16	; 0x10
     b08:	f9 89       	ldd	r31, Y+17	; 0x11
     b0a:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     b0c:	60 e8       	ldi	r22, 0x80	; 128
     b0e:	74 e8       	ldi	r23, 0x84	; 132
     b10:	8e e1       	ldi	r24, 0x1E	; 30
     b12:	90 e0       	ldi	r25, 0x00	; 0
     b14:	a7 01       	movw	r20, r14
     b16:	96 01       	movw	r18, r12
     b18:	0e 94 a1 08 	call	0x1142	; 0x1142 <__udivmodsi4>
     b1c:	da 01       	movw	r26, r20
     b1e:	c9 01       	movw	r24, r18
     b20:	01 97       	sbiw	r24, 0x01	; 1
     b22:	a1 09       	sbc	r26, r1
     b24:	b1 09       	sbc	r27, r1
     b26:	b6 95       	lsr	r27
     b28:	a7 95       	ror	r26
     b2a:	97 95       	ror	r25
     b2c:	87 95       	ror	r24
     b2e:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     b30:	ec 85       	ldd	r30, Y+12	; 0x0c
     b32:	fd 85       	ldd	r31, Y+13	; 0x0d
     b34:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
     b36:	ee 85       	ldd	r30, Y+14	; 0x0e
     b38:	ff 85       	ldd	r31, Y+15	; 0x0f
     b3a:	20 83       	st	Z, r18

  _written = false;
     b3c:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     b3e:	ec 89       	ldd	r30, Y+20	; 0x14
     b40:	fd 89       	ldd	r31, Y+21	; 0x15
     b42:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
     b44:	ea 89       	ldd	r30, Y+18	; 0x12
     b46:	fb 89       	ldd	r31, Y+19	; 0x13
     b48:	80 81       	ld	r24, Z
     b4a:	80 61       	ori	r24, 0x10	; 16
     b4c:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
     b4e:	ea 89       	ldd	r30, Y+18	; 0x12
     b50:	fb 89       	ldd	r31, Y+19	; 0x13
     b52:	80 81       	ld	r24, Z
     b54:	88 60       	ori	r24, 0x08	; 8
     b56:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
     b58:	ea 89       	ldd	r30, Y+18	; 0x12
     b5a:	fb 89       	ldd	r31, Y+19	; 0x13
     b5c:	80 81       	ld	r24, Z
     b5e:	80 68       	ori	r24, 0x80	; 128
     b60:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
     b62:	ea 89       	ldd	r30, Y+18	; 0x12
     b64:	fb 89       	ldd	r31, Y+19	; 0x13
     b66:	80 81       	ld	r24, Z
     b68:	8f 7d       	andi	r24, 0xDF	; 223
     b6a:	80 83       	st	Z, r24
}
     b6c:	df 91       	pop	r29
     b6e:	cf 91       	pop	r28
     b70:	1f 91       	pop	r17
     b72:	ff 90       	pop	r15
     b74:	ef 90       	pop	r14
     b76:	df 90       	pop	r13
     b78:	cf 90       	pop	r12
     b7a:	08 95       	ret

00000b7c <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     b7c:	1f 92       	push	r1
     b7e:	0f 92       	push	r0
     b80:	0f b6       	in	r0, 0x3f	; 63
     b82:	0f 92       	push	r0
     b84:	11 24       	eor	r1, r1
     b86:	2f 93       	push	r18
     b88:	8f 93       	push	r24
     b8a:	9f 93       	push	r25
     b8c:	ef 93       	push	r30
     b8e:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     b90:	e0 91 d1 01 	lds	r30, 0x01D1	; 0x8001d1 <Serial+0x10>
     b94:	f0 91 d2 01 	lds	r31, 0x01D2	; 0x8001d2 <Serial+0x11>
     b98:	80 81       	ld	r24, Z
     b9a:	e0 91 d7 01 	lds	r30, 0x01D7	; 0x8001d7 <Serial+0x16>
     b9e:	f0 91 d8 01 	lds	r31, 0x01D8	; 0x8001d8 <Serial+0x17>
     ba2:	82 fd       	sbrc	r24, 2
     ba4:	12 c0       	rjmp	.+36     	; 0xbca <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     ba6:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     ba8:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <Serial+0x19>
     bac:	8f 5f       	subi	r24, 0xFF	; 255
     bae:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     bb0:	20 91 db 01 	lds	r18, 0x01DB	; 0x8001db <Serial+0x1a>
     bb4:	82 17       	cp	r24, r18
     bb6:	51 f0       	breq	.+20     	; 0xbcc <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
     bb8:	e0 91 da 01 	lds	r30, 0x01DA	; 0x8001da <Serial+0x19>
     bbc:	f0 e0       	ldi	r31, 0x00	; 0
     bbe:	ef 53       	subi	r30, 0x3F	; 63
     bc0:	fe 4f       	sbci	r31, 0xFE	; 254
     bc2:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
     bc4:	80 93 da 01 	sts	0x01DA, r24	; 0x8001da <Serial+0x19>
     bc8:	01 c0       	rjmp	.+2      	; 0xbcc <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     bca:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
     bcc:	ff 91       	pop	r31
     bce:	ef 91       	pop	r30
     bd0:	9f 91       	pop	r25
     bd2:	8f 91       	pop	r24
     bd4:	2f 91       	pop	r18
     bd6:	0f 90       	pop	r0
     bd8:	0f be       	out	0x3f, r0	; 63
     bda:	0f 90       	pop	r0
     bdc:	1f 90       	pop	r1
     bde:	18 95       	reti

00000be0 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     be0:	1f 92       	push	r1
     be2:	0f 92       	push	r0
     be4:	0f b6       	in	r0, 0x3f	; 63
     be6:	0f 92       	push	r0
     be8:	11 24       	eor	r1, r1
     bea:	2f 93       	push	r18
     bec:	3f 93       	push	r19
     bee:	4f 93       	push	r20
     bf0:	5f 93       	push	r21
     bf2:	6f 93       	push	r22
     bf4:	7f 93       	push	r23
     bf6:	8f 93       	push	r24
     bf8:	9f 93       	push	r25
     bfa:	af 93       	push	r26
     bfc:	bf 93       	push	r27
     bfe:	ef 93       	push	r30
     c00:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
     c02:	81 ec       	ldi	r24, 0xC1	; 193
     c04:	91 e0       	ldi	r25, 0x01	; 1
     c06:	0e 94 cf 04 	call	0x99e	; 0x99e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
     c0a:	ff 91       	pop	r31
     c0c:	ef 91       	pop	r30
     c0e:	bf 91       	pop	r27
     c10:	af 91       	pop	r26
     c12:	9f 91       	pop	r25
     c14:	8f 91       	pop	r24
     c16:	7f 91       	pop	r23
     c18:	6f 91       	pop	r22
     c1a:	5f 91       	pop	r21
     c1c:	4f 91       	pop	r20
     c1e:	3f 91       	pop	r19
     c20:	2f 91       	pop	r18
     c22:	0f 90       	pop	r0
     c24:	0f be       	out	0x3f, r0	; 63
     c26:	0f 90       	pop	r0
     c28:	1f 90       	pop	r1
     c2a:	18 95       	reti

00000c2c <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     c2c:	81 ec       	ldi	r24, 0xC1	; 193
     c2e:	91 e0       	ldi	r25, 0x01	; 1
     c30:	0e 94 84 04 	call	0x908	; 0x908 <_ZN14HardwareSerial9availableEv>
     c34:	21 e0       	ldi	r18, 0x01	; 1
     c36:	89 2b       	or	r24, r25
     c38:	09 f4       	brne	.+2      	; 0xc3c <_Z17Serial0_availablev+0x10>
     c3a:	20 e0       	ldi	r18, 0x00	; 0
}
     c3c:	82 2f       	mov	r24, r18
     c3e:	08 95       	ret

00000c40 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     c40:	e1 ec       	ldi	r30, 0xC1	; 193
     c42:	f1 e0       	ldi	r31, 0x01	; 1
     c44:	13 82       	std	Z+3, r1	; 0x03
     c46:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
     c48:	88 ee       	ldi	r24, 0xE8	; 232
     c4a:	93 e0       	ldi	r25, 0x03	; 3
     c4c:	a0 e0       	ldi	r26, 0x00	; 0
     c4e:	b0 e0       	ldi	r27, 0x00	; 0
     c50:	84 83       	std	Z+4, r24	; 0x04
     c52:	95 83       	std	Z+5, r25	; 0x05
     c54:	a6 83       	std	Z+6, r26	; 0x06
     c56:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
     c58:	88 e3       	ldi	r24, 0x38	; 56
     c5a:	91 e0       	ldi	r25, 0x01	; 1
     c5c:	91 83       	std	Z+1, r25	; 0x01
     c5e:	80 83       	st	Z, r24
     c60:	85 ec       	ldi	r24, 0xC5	; 197
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	95 87       	std	Z+13, r25	; 0x0d
     c66:	84 87       	std	Z+12, r24	; 0x0c
     c68:	84 ec       	ldi	r24, 0xC4	; 196
     c6a:	90 e0       	ldi	r25, 0x00	; 0
     c6c:	97 87       	std	Z+15, r25	; 0x0f
     c6e:	86 87       	std	Z+14, r24	; 0x0e
     c70:	80 ec       	ldi	r24, 0xC0	; 192
     c72:	90 e0       	ldi	r25, 0x00	; 0
     c74:	91 8b       	std	Z+17, r25	; 0x11
     c76:	80 8b       	std	Z+16, r24	; 0x10
     c78:	81 ec       	ldi	r24, 0xC1	; 193
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	93 8b       	std	Z+19, r25	; 0x13
     c7e:	82 8b       	std	Z+18, r24	; 0x12
     c80:	82 ec       	ldi	r24, 0xC2	; 194
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	95 8b       	std	Z+21, r25	; 0x15
     c86:	84 8b       	std	Z+20, r24	; 0x14
     c88:	86 ec       	ldi	r24, 0xC6	; 198
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	97 8b       	std	Z+23, r25	; 0x17
     c8e:	86 8b       	std	Z+22, r24	; 0x16
     c90:	11 8e       	std	Z+25, r1	; 0x19
     c92:	12 8e       	std	Z+26, r1	; 0x1a
     c94:	13 8e       	std	Z+27, r1	; 0x1b
     c96:	14 8e       	std	Z+28, r1	; 0x1c
     c98:	08 95       	ret

00000c9a <initVariant>:
     c9a:	08 95       	ret

00000c9c <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
     c9c:	0e 94 a9 07 	call	0xf52	; 0xf52 <init>

	initVariant();
     ca0:	0e 94 4d 06 	call	0xc9a	; 0xc9a <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
     ca4:	0e 94 3f 03 	call	0x67e	; 0x67e <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
     ca8:	c1 ec       	ldi	r28, 0xC1	; 193
     caa:	d4 e0       	ldi	r29, 0x04	; 4
#endif
	
	setup();
    
	for (;;) {
		loop();
     cac:	0e 94 92 03 	call	0x724	; 0x724 <loop>
		if (serialEventRun) serialEventRun();
     cb0:	20 97       	sbiw	r28, 0x00	; 0
     cb2:	e1 f3       	breq	.-8      	; 0xcac <main+0x10>
     cb4:	0e 94 c1 04 	call	0x982	; 0x982 <_Z14serialEventRunv>
     cb8:	f9 cf       	rjmp	.-14     	; 0xcac <main+0x10>

00000cba <_ZN5Print5writeEPKhj>:
size_t Print::println(unsigned long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
     cba:	cf 92       	push	r12
     cbc:	df 92       	push	r13
     cbe:	ef 92       	push	r14
     cc0:	ff 92       	push	r15
     cc2:	0f 93       	push	r16
     cc4:	1f 93       	push	r17
     cc6:	cf 93       	push	r28
     cc8:	df 93       	push	r29
     cca:	6c 01       	movw	r12, r24
     ccc:	7a 01       	movw	r14, r20
     cce:	8b 01       	movw	r16, r22
     cd0:	c0 e0       	ldi	r28, 0x00	; 0
     cd2:	d0 e0       	ldi	r29, 0x00	; 0
     cd4:	ce 15       	cp	r28, r14
     cd6:	df 05       	cpc	r29, r15
     cd8:	81 f0       	breq	.+32     	; 0xcfa <_ZN5Print5writeEPKhj+0x40>
     cda:	d8 01       	movw	r26, r16
     cdc:	6d 91       	ld	r22, X+
     cde:	8d 01       	movw	r16, r26
     ce0:	d6 01       	movw	r26, r12
     ce2:	ed 91       	ld	r30, X+
     ce4:	fc 91       	ld	r31, X
     ce6:	01 90       	ld	r0, Z+
     ce8:	f0 81       	ld	r31, Z
     cea:	e0 2d       	mov	r30, r0
     cec:	c6 01       	movw	r24, r12
     cee:	09 95       	icall
     cf0:	89 2b       	or	r24, r25
     cf2:	11 f0       	breq	.+4      	; 0xcf8 <_ZN5Print5writeEPKhj+0x3e>
     cf4:	21 96       	adiw	r28, 0x01	; 1
     cf6:	ee cf       	rjmp	.-36     	; 0xcd4 <_ZN5Print5writeEPKhj+0x1a>
     cf8:	7e 01       	movw	r14, r28
     cfa:	c7 01       	movw	r24, r14
     cfc:	df 91       	pop	r29
     cfe:	cf 91       	pop	r28
     d00:	1f 91       	pop	r17
     d02:	0f 91       	pop	r16
     d04:	ff 90       	pop	r15
     d06:	ef 90       	pop	r14
     d08:	df 90       	pop	r13
     d0a:	cf 90       	pop	r12
     d0c:	08 95       	ret

00000d0e <_ZN5Print5writeEPKc>:
     d0e:	61 15       	cp	r22, r1
     d10:	71 05       	cpc	r23, r1
     d12:	79 f0       	breq	.+30     	; 0xd32 <_ZN5Print5writeEPKc+0x24>
     d14:	fb 01       	movw	r30, r22
     d16:	01 90       	ld	r0, Z+
     d18:	00 20       	and	r0, r0
     d1a:	e9 f7       	brne	.-6      	; 0xd16 <_ZN5Print5writeEPKc+0x8>
     d1c:	31 97       	sbiw	r30, 0x01	; 1
     d1e:	af 01       	movw	r20, r30
     d20:	46 1b       	sub	r20, r22
     d22:	57 0b       	sbc	r21, r23
     d24:	dc 01       	movw	r26, r24
     d26:	ed 91       	ld	r30, X+
     d28:	fc 91       	ld	r31, X
     d2a:	02 80       	ldd	r0, Z+2	; 0x02
     d2c:	f3 81       	ldd	r31, Z+3	; 0x03
     d2e:	e0 2d       	mov	r30, r0
     d30:	09 94       	ijmp
     d32:	80 e0       	ldi	r24, 0x00	; 0
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	08 95       	ret

00000d38 <_ZN5Print5printEPKc>:
     d38:	0c 94 87 06 	jmp	0xd0e	; 0xd0e <_ZN5Print5writeEPKc>

00000d3c <_ZN5Print5printEc>:
     d3c:	dc 01       	movw	r26, r24
     d3e:	ed 91       	ld	r30, X+
     d40:	fc 91       	ld	r31, X
     d42:	01 90       	ld	r0, Z+
     d44:	f0 81       	ld	r31, Z
     d46:	e0 2d       	mov	r30, r0
     d48:	09 94       	ijmp

00000d4a <_ZN5Print7printlnEv>:
     d4a:	66 e4       	ldi	r22, 0x46	; 70
     d4c:	71 e0       	ldi	r23, 0x01	; 1
     d4e:	0c 94 87 06 	jmp	0xd0e	; 0xd0e <_ZN5Print5writeEPKc>

00000d52 <_ZN5Print7printlnEPKc>:
     d52:	0f 93       	push	r16
     d54:	1f 93       	push	r17
     d56:	cf 93       	push	r28
     d58:	df 93       	push	r29
     d5a:	ec 01       	movw	r28, r24
     d5c:	0e 94 87 06 	call	0xd0e	; 0xd0e <_ZN5Print5writeEPKc>
     d60:	8c 01       	movw	r16, r24
     d62:	ce 01       	movw	r24, r28
     d64:	0e 94 a5 06 	call	0xd4a	; 0xd4a <_ZN5Print7printlnEv>
     d68:	80 0f       	add	r24, r16
     d6a:	91 1f       	adc	r25, r17
     d6c:	df 91       	pop	r29
     d6e:	cf 91       	pop	r28
     d70:	1f 91       	pop	r17
     d72:	0f 91       	pop	r16
     d74:	08 95       	ret

00000d76 <_ZN5Print11printNumberEmh>:
     d76:	8f 92       	push	r8
     d78:	9f 92       	push	r9
     d7a:	af 92       	push	r10
     d7c:	bf 92       	push	r11
     d7e:	ef 92       	push	r14
     d80:	ff 92       	push	r15
     d82:	0f 93       	push	r16
     d84:	1f 93       	push	r17
     d86:	cf 93       	push	r28
     d88:	df 93       	push	r29
     d8a:	cd b7       	in	r28, 0x3d	; 61
     d8c:	de b7       	in	r29, 0x3e	; 62
     d8e:	a1 97       	sbiw	r28, 0x21	; 33
     d90:	0f b6       	in	r0, 0x3f	; 63
     d92:	f8 94       	cli
     d94:	de bf       	out	0x3e, r29	; 62
     d96:	0f be       	out	0x3f, r0	; 63
     d98:	cd bf       	out	0x3d, r28	; 61
     d9a:	7c 01       	movw	r14, r24
     d9c:	fa 01       	movw	r30, r20
     d9e:	cb 01       	movw	r24, r22
     da0:	19 a2       	std	Y+33, r1	; 0x21
     da2:	22 30       	cpi	r18, 0x02	; 2
     da4:	08 f4       	brcc	.+2      	; 0xda8 <_ZN5Print11printNumberEmh+0x32>
     da6:	2a e0       	ldi	r18, 0x0A	; 10
     da8:	8e 01       	movw	r16, r28
     daa:	0f 5d       	subi	r16, 0xDF	; 223
     dac:	1f 4f       	sbci	r17, 0xFF	; 255
     dae:	82 2e       	mov	r8, r18
     db0:	91 2c       	mov	r9, r1
     db2:	a1 2c       	mov	r10, r1
     db4:	b1 2c       	mov	r11, r1
     db6:	bf 01       	movw	r22, r30
     db8:	a5 01       	movw	r20, r10
     dba:	94 01       	movw	r18, r8
     dbc:	0e 94 a1 08 	call	0x1142	; 0x1142 <__udivmodsi4>
     dc0:	f9 01       	movw	r30, r18
     dc2:	ca 01       	movw	r24, r20
     dc4:	01 50       	subi	r16, 0x01	; 1
     dc6:	11 09       	sbc	r17, r1
     dc8:	6a 30       	cpi	r22, 0x0A	; 10
     dca:	10 f4       	brcc	.+4      	; 0xdd0 <_ZN5Print11printNumberEmh+0x5a>
     dcc:	60 5d       	subi	r22, 0xD0	; 208
     dce:	01 c0       	rjmp	.+2      	; 0xdd2 <_ZN5Print11printNumberEmh+0x5c>
     dd0:	69 5c       	subi	r22, 0xC9	; 201
     dd2:	d8 01       	movw	r26, r16
     dd4:	6c 93       	st	X, r22
     dd6:	23 2b       	or	r18, r19
     dd8:	24 2b       	or	r18, r20
     dda:	25 2b       	or	r18, r21
     ddc:	61 f7       	brne	.-40     	; 0xdb6 <_ZN5Print11printNumberEmh+0x40>
     dde:	b8 01       	movw	r22, r16
     de0:	c7 01       	movw	r24, r14
     de2:	0e 94 87 06 	call	0xd0e	; 0xd0e <_ZN5Print5writeEPKc>
     de6:	a1 96       	adiw	r28, 0x21	; 33
     de8:	0f b6       	in	r0, 0x3f	; 63
     dea:	f8 94       	cli
     dec:	de bf       	out	0x3e, r29	; 62
     dee:	0f be       	out	0x3f, r0	; 63
     df0:	cd bf       	out	0x3d, r28	; 61
     df2:	df 91       	pop	r29
     df4:	cf 91       	pop	r28
     df6:	1f 91       	pop	r17
     df8:	0f 91       	pop	r16
     dfa:	ff 90       	pop	r15
     dfc:	ef 90       	pop	r14
     dfe:	bf 90       	pop	r11
     e00:	af 90       	pop	r10
     e02:	9f 90       	pop	r9
     e04:	8f 90       	pop	r8
     e06:	08 95       	ret

00000e08 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
     e08:	cf 92       	push	r12
     e0a:	df 92       	push	r13
     e0c:	ef 92       	push	r14
     e0e:	ff 92       	push	r15
     e10:	0f 93       	push	r16
     e12:	1f 93       	push	r17
     e14:	cf 93       	push	r28
     e16:	df 93       	push	r29
  if (base == 0) {
     e18:	21 15       	cp	r18, r1
     e1a:	31 05       	cpc	r19, r1
     e1c:	81 f4       	brne	.+32     	; 0xe3e <_ZN5Print5printEli+0x36>
    return write(n);
     e1e:	dc 01       	movw	r26, r24
     e20:	ed 91       	ld	r30, X+
     e22:	fc 91       	ld	r31, X
     e24:	01 90       	ld	r0, Z+
     e26:	f0 81       	ld	r31, Z
     e28:	e0 2d       	mov	r30, r0
     e2a:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
     e2c:	df 91       	pop	r29
     e2e:	cf 91       	pop	r28
     e30:	1f 91       	pop	r17
     e32:	0f 91       	pop	r16
     e34:	ff 90       	pop	r15
     e36:	ef 90       	pop	r14
     e38:	df 90       	pop	r13
     e3a:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
     e3c:	09 94       	ijmp
  } else if (base == 10) {
     e3e:	2a 30       	cpi	r18, 0x0A	; 10
     e40:	31 05       	cpc	r19, r1
     e42:	01 f5       	brne	.+64     	; 0xe84 <_ZN5Print5printEli+0x7c>
    if (n < 0) {
     e44:	77 ff       	sbrs	r23, 7
     e46:	1d c0       	rjmp	.+58     	; 0xe82 <_ZN5Print5printEli+0x7a>
     e48:	6a 01       	movw	r12, r20
     e4a:	7b 01       	movw	r14, r22
     e4c:	ec 01       	movw	r28, r24
      int t = print('-');
     e4e:	6d e2       	ldi	r22, 0x2D	; 45
     e50:	0e 94 9e 06 	call	0xd3c	; 0xd3c <_ZN5Print5printEc>
     e54:	8c 01       	movw	r16, r24
      n = -n;
      return printNumber(n, 10) + t;
     e56:	44 27       	eor	r20, r20
     e58:	55 27       	eor	r21, r21
     e5a:	ba 01       	movw	r22, r20
     e5c:	4c 19       	sub	r20, r12
     e5e:	5d 09       	sbc	r21, r13
     e60:	6e 09       	sbc	r22, r14
     e62:	7f 09       	sbc	r23, r15
     e64:	2a e0       	ldi	r18, 0x0A	; 10
     e66:	ce 01       	movw	r24, r28
     e68:	0e 94 bb 06 	call	0xd76	; 0xd76 <_ZN5Print11printNumberEmh>
     e6c:	80 0f       	add	r24, r16
     e6e:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
     e70:	df 91       	pop	r29
     e72:	cf 91       	pop	r28
     e74:	1f 91       	pop	r17
     e76:	0f 91       	pop	r16
     e78:	ff 90       	pop	r15
     e7a:	ef 90       	pop	r14
     e7c:	df 90       	pop	r13
     e7e:	cf 90       	pop	r12
     e80:	08 95       	ret
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
     e82:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
  }
}
     e84:	df 91       	pop	r29
     e86:	cf 91       	pop	r28
     e88:	1f 91       	pop	r17
     e8a:	0f 91       	pop	r16
     e8c:	ff 90       	pop	r15
     e8e:	ef 90       	pop	r14
     e90:	df 90       	pop	r13
     e92:	cf 90       	pop	r12
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
     e94:	0c 94 bb 06 	jmp	0xd76	; 0xd76 <_ZN5Print11printNumberEmh>

00000e98 <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
     e98:	9a 01       	movw	r18, r20
  return print((long) n, base);
     e9a:	ab 01       	movw	r20, r22
     e9c:	77 0f       	add	r23, r23
     e9e:	66 0b       	sbc	r22, r22
     ea0:	77 0b       	sbc	r23, r23
     ea2:	0c 94 04 07 	jmp	0xe08	; 0xe08 <_ZN5Print5printEli>

00000ea6 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
     ea6:	1f 92       	push	r1
     ea8:	0f 92       	push	r0
     eaa:	0f b6       	in	r0, 0x3f	; 63
     eac:	0f 92       	push	r0
     eae:	11 24       	eor	r1, r1
     eb0:	2f 93       	push	r18
     eb2:	3f 93       	push	r19
     eb4:	8f 93       	push	r24
     eb6:	9f 93       	push	r25
     eb8:	af 93       	push	r26
     eba:	bf 93       	push	r27
     ebc:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <timer0_millis>
     ec0:	90 91 60 02 	lds	r25, 0x0260	; 0x800260 <timer0_millis+0x1>
     ec4:	a0 91 61 02 	lds	r26, 0x0261	; 0x800261 <timer0_millis+0x2>
     ec8:	b0 91 62 02 	lds	r27, 0x0262	; 0x800262 <timer0_millis+0x3>
     ecc:	30 91 5e 02 	lds	r19, 0x025E	; 0x80025e <timer0_fract>
     ed0:	23 e0       	ldi	r18, 0x03	; 3
     ed2:	23 0f       	add	r18, r19
     ed4:	2d 37       	cpi	r18, 0x7D	; 125
     ed6:	20 f4       	brcc	.+8      	; 0xee0 <__vector_16+0x3a>
     ed8:	01 96       	adiw	r24, 0x01	; 1
     eda:	a1 1d       	adc	r26, r1
     edc:	b1 1d       	adc	r27, r1
     ede:	05 c0       	rjmp	.+10     	; 0xeea <__vector_16+0x44>
     ee0:	26 e8       	ldi	r18, 0x86	; 134
     ee2:	23 0f       	add	r18, r19
     ee4:	02 96       	adiw	r24, 0x02	; 2
     ee6:	a1 1d       	adc	r26, r1
     ee8:	b1 1d       	adc	r27, r1
     eea:	20 93 5e 02 	sts	0x025E, r18	; 0x80025e <timer0_fract>
     eee:	80 93 5f 02 	sts	0x025F, r24	; 0x80025f <timer0_millis>
     ef2:	90 93 60 02 	sts	0x0260, r25	; 0x800260 <timer0_millis+0x1>
     ef6:	a0 93 61 02 	sts	0x0261, r26	; 0x800261 <timer0_millis+0x2>
     efa:	b0 93 62 02 	sts	0x0262, r27	; 0x800262 <timer0_millis+0x3>
     efe:	80 91 63 02 	lds	r24, 0x0263	; 0x800263 <timer0_overflow_count>
     f02:	90 91 64 02 	lds	r25, 0x0264	; 0x800264 <timer0_overflow_count+0x1>
     f06:	a0 91 65 02 	lds	r26, 0x0265	; 0x800265 <timer0_overflow_count+0x2>
     f0a:	b0 91 66 02 	lds	r27, 0x0266	; 0x800266 <timer0_overflow_count+0x3>
     f0e:	01 96       	adiw	r24, 0x01	; 1
     f10:	a1 1d       	adc	r26, r1
     f12:	b1 1d       	adc	r27, r1
     f14:	80 93 63 02 	sts	0x0263, r24	; 0x800263 <timer0_overflow_count>
     f18:	90 93 64 02 	sts	0x0264, r25	; 0x800264 <timer0_overflow_count+0x1>
     f1c:	a0 93 65 02 	sts	0x0265, r26	; 0x800265 <timer0_overflow_count+0x2>
     f20:	b0 93 66 02 	sts	0x0266, r27	; 0x800266 <timer0_overflow_count+0x3>
     f24:	bf 91       	pop	r27
     f26:	af 91       	pop	r26
     f28:	9f 91       	pop	r25
     f2a:	8f 91       	pop	r24
     f2c:	3f 91       	pop	r19
     f2e:	2f 91       	pop	r18
     f30:	0f 90       	pop	r0
     f32:	0f be       	out	0x3f, r0	; 63
     f34:	0f 90       	pop	r0
     f36:	1f 90       	pop	r1
     f38:	18 95       	reti

00000f3a <millis>:
     f3a:	2f b7       	in	r18, 0x3f	; 63
     f3c:	f8 94       	cli
     f3e:	60 91 5f 02 	lds	r22, 0x025F	; 0x80025f <timer0_millis>
     f42:	70 91 60 02 	lds	r23, 0x0260	; 0x800260 <timer0_millis+0x1>
     f46:	80 91 61 02 	lds	r24, 0x0261	; 0x800261 <timer0_millis+0x2>
     f4a:	90 91 62 02 	lds	r25, 0x0262	; 0x800262 <timer0_millis+0x3>
     f4e:	2f bf       	out	0x3f, r18	; 63
     f50:	08 95       	ret

00000f52 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     f52:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     f54:	84 b5       	in	r24, 0x24	; 36
     f56:	82 60       	ori	r24, 0x02	; 2
     f58:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
     f5a:	84 b5       	in	r24, 0x24	; 36
     f5c:	81 60       	ori	r24, 0x01	; 1
     f5e:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     f60:	85 b5       	in	r24, 0x25	; 37
     f62:	82 60       	ori	r24, 0x02	; 2
     f64:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
     f66:	85 b5       	in	r24, 0x25	; 37
     f68:	81 60       	ori	r24, 0x01	; 1
     f6a:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
     f6c:	ee e6       	ldi	r30, 0x6E	; 110
     f6e:	f0 e0       	ldi	r31, 0x00	; 0
     f70:	80 81       	ld	r24, Z
     f72:	81 60       	ori	r24, 0x01	; 1
     f74:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
     f76:	e1 e8       	ldi	r30, 0x81	; 129
     f78:	f0 e0       	ldi	r31, 0x00	; 0
     f7a:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
     f7c:	80 81       	ld	r24, Z
     f7e:	82 60       	ori	r24, 0x02	; 2
     f80:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
     f82:	80 81       	ld	r24, Z
     f84:	81 60       	ori	r24, 0x01	; 1
     f86:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
     f88:	e0 e8       	ldi	r30, 0x80	; 128
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	80 81       	ld	r24, Z
     f8e:	81 60       	ori	r24, 0x01	; 1
     f90:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
     f92:	e1 eb       	ldi	r30, 0xB1	; 177
     f94:	f0 e0       	ldi	r31, 0x00	; 0
     f96:	80 81       	ld	r24, Z
     f98:	84 60       	ori	r24, 0x04	; 4
     f9a:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
     f9c:	e0 eb       	ldi	r30, 0xB0	; 176
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
     fa0:	80 81       	ld	r24, Z
     fa2:	81 60       	ori	r24, 0x01	; 1
     fa4:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
     fa6:	ea e7       	ldi	r30, 0x7A	; 122
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	80 81       	ld	r24, Z
     fac:	84 60       	ori	r24, 0x04	; 4
     fae:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
     fb0:	80 81       	ld	r24, Z
     fb2:	82 60       	ori	r24, 0x02	; 2
     fb4:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
     fb6:	80 81       	ld	r24, Z
     fb8:	81 60       	ori	r24, 0x01	; 1
     fba:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
     fbc:	80 81       	ld	r24, Z
     fbe:	80 68       	ori	r24, 0x80	; 128
     fc0:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
     fc2:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     fc6:	08 95       	ret

00000fc8 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
     fc8:	83 30       	cpi	r24, 0x03	; 3
     fca:	81 f0       	breq	.+32     	; 0xfec <turnOffPWM+0x24>
     fcc:	28 f4       	brcc	.+10     	; 0xfd8 <turnOffPWM+0x10>
     fce:	81 30       	cpi	r24, 0x01	; 1
     fd0:	99 f0       	breq	.+38     	; 0xff8 <turnOffPWM+0x30>
     fd2:	82 30       	cpi	r24, 0x02	; 2
     fd4:	a1 f0       	breq	.+40     	; 0xffe <turnOffPWM+0x36>
     fd6:	08 95       	ret
     fd8:	87 30       	cpi	r24, 0x07	; 7
     fda:	a9 f0       	breq	.+42     	; 0x1006 <turnOffPWM+0x3e>
     fdc:	88 30       	cpi	r24, 0x08	; 8
     fde:	b9 f0       	breq	.+46     	; 0x100e <turnOffPWM+0x46>
     fe0:	84 30       	cpi	r24, 0x04	; 4
     fe2:	d1 f4       	brne	.+52     	; 0x1018 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     fe4:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     fe8:	8f 7d       	andi	r24, 0xDF	; 223
     fea:	03 c0       	rjmp	.+6      	; 0xff2 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
     fec:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     ff0:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     ff2:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     ff6:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
     ff8:	84 b5       	in	r24, 0x24	; 36
     ffa:	8f 77       	andi	r24, 0x7F	; 127
     ffc:	02 c0       	rjmp	.+4      	; 0x1002 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
     ffe:	84 b5       	in	r24, 0x24	; 36
    1000:	8f 7d       	andi	r24, 0xDF	; 223
    1002:	84 bd       	out	0x24, r24	; 36
    1004:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    1006:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    100a:	8f 77       	andi	r24, 0x7F	; 127
    100c:	03 c0       	rjmp	.+6      	; 0x1014 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    100e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1012:	8f 7d       	andi	r24, 0xDF	; 223
    1014:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1018:	08 95       	ret

0000101a <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    101a:	cf 93       	push	r28
    101c:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	fc 01       	movw	r30, r24
    1022:	e0 57       	subi	r30, 0x70	; 112
    1024:	ff 4f       	sbci	r31, 0xFF	; 255
    1026:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    1028:	fc 01       	movw	r30, r24
    102a:	ec 55       	subi	r30, 0x5C	; 92
    102c:	ff 4f       	sbci	r31, 0xFF	; 255
    102e:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    1030:	88 23       	and	r24, r24
    1032:	61 f1       	breq	.+88     	; 0x108c <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	88 0f       	add	r24, r24
    1038:	99 1f       	adc	r25, r25
    103a:	fc 01       	movw	r30, r24
    103c:	e4 53       	subi	r30, 0x34	; 52
    103e:	ff 4f       	sbci	r31, 0xFF	; 255
    1040:	c5 91       	lpm	r28, Z+
    1042:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    1044:	fc 01       	movw	r30, r24
    1046:	ee 53       	subi	r30, 0x3E	; 62
    1048:	ff 4f       	sbci	r31, 0xFF	; 255
    104a:	a5 91       	lpm	r26, Z+
    104c:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    104e:	61 11       	cpse	r22, r1
    1050:	09 c0       	rjmp	.+18     	; 0x1064 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    1052:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1054:	f8 94       	cli
		*reg &= ~bit;
    1056:	88 81       	ld	r24, Y
    1058:	20 95       	com	r18
    105a:	82 23       	and	r24, r18
    105c:	88 83       	st	Y, r24
		*out &= ~bit;
    105e:	ec 91       	ld	r30, X
    1060:	2e 23       	and	r18, r30
    1062:	0b c0       	rjmp	.+22     	; 0x107a <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    1064:	62 30       	cpi	r22, 0x02	; 2
    1066:	61 f4       	brne	.+24     	; 0x1080 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    1068:	9f b7       	in	r25, 0x3f	; 63
                cli();
    106a:	f8 94       	cli
		*reg &= ~bit;
    106c:	88 81       	ld	r24, Y
    106e:	32 2f       	mov	r19, r18
    1070:	30 95       	com	r19
    1072:	83 23       	and	r24, r19
    1074:	88 83       	st	Y, r24
		*out |= bit;
    1076:	ec 91       	ld	r30, X
    1078:	2e 2b       	or	r18, r30
    107a:	2c 93       	st	X, r18
		SREG = oldSREG;
    107c:	9f bf       	out	0x3f, r25	; 63
    107e:	06 c0       	rjmp	.+12     	; 0x108c <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    1080:	8f b7       	in	r24, 0x3f	; 63
                cli();
    1082:	f8 94       	cli
		*reg |= bit;
    1084:	e8 81       	ld	r30, Y
    1086:	2e 2b       	or	r18, r30
    1088:	28 83       	st	Y, r18
		SREG = oldSREG;
    108a:	8f bf       	out	0x3f, r24	; 63
	}
}
    108c:	df 91       	pop	r29
    108e:	cf 91       	pop	r28
    1090:	08 95       	ret

00001092 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    1092:	1f 93       	push	r17
    1094:	cf 93       	push	r28
    1096:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    1098:	28 2f       	mov	r18, r24
    109a:	30 e0       	ldi	r19, 0x00	; 0
    109c:	f9 01       	movw	r30, r18
    109e:	e4 58       	subi	r30, 0x84	; 132
    10a0:	ff 4f       	sbci	r31, 0xFF	; 255
    10a2:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    10a4:	f9 01       	movw	r30, r18
    10a6:	e0 57       	subi	r30, 0x70	; 112
    10a8:	ff 4f       	sbci	r31, 0xFF	; 255
    10aa:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    10ac:	f9 01       	movw	r30, r18
    10ae:	ec 55       	subi	r30, 0x5C	; 92
    10b0:	ff 4f       	sbci	r31, 0xFF	; 255
    10b2:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    10b4:	cc 23       	and	r28, r28
    10b6:	c1 f0       	breq	.+48     	; 0x10e8 <digitalWrite+0x56>
    10b8:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    10ba:	81 11       	cpse	r24, r1
    10bc:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <turnOffPWM>

	out = portOutputRegister(port);
    10c0:	ec 2f       	mov	r30, r28
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	ee 0f       	add	r30, r30
    10c6:	ff 1f       	adc	r31, r31
    10c8:	ee 53       	subi	r30, 0x3E	; 62
    10ca:	ff 4f       	sbci	r31, 0xFF	; 255
    10cc:	a5 91       	lpm	r26, Z+
    10ce:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    10d0:	9f b7       	in	r25, 0x3f	; 63
	cli();
    10d2:	f8 94       	cli

	if (val == LOW) {
    10d4:	11 11       	cpse	r17, r1
    10d6:	04 c0       	rjmp	.+8      	; 0x10e0 <digitalWrite+0x4e>
		*out &= ~bit;
    10d8:	8c 91       	ld	r24, X
    10da:	d0 95       	com	r29
    10dc:	d8 23       	and	r29, r24
    10de:	02 c0       	rjmp	.+4      	; 0x10e4 <digitalWrite+0x52>
	} else {
		*out |= bit;
    10e0:	ec 91       	ld	r30, X
    10e2:	de 2b       	or	r29, r30
    10e4:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    10e6:	9f bf       	out	0x3f, r25	; 63
}
    10e8:	df 91       	pop	r29
    10ea:	cf 91       	pop	r28
    10ec:	1f 91       	pop	r17
    10ee:	08 95       	ret

000010f0 <digitalRead>:

int digitalRead(uint8_t pin)
{
    10f0:	cf 93       	push	r28
    10f2:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    10f4:	28 2f       	mov	r18, r24
    10f6:	30 e0       	ldi	r19, 0x00	; 0
    10f8:	f9 01       	movw	r30, r18
    10fa:	e4 58       	subi	r30, 0x84	; 132
    10fc:	ff 4f       	sbci	r31, 0xFF	; 255
    10fe:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    1100:	f9 01       	movw	r30, r18
    1102:	e0 57       	subi	r30, 0x70	; 112
    1104:	ff 4f       	sbci	r31, 0xFF	; 255
    1106:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    1108:	f9 01       	movw	r30, r18
    110a:	ec 55       	subi	r30, 0x5C	; 92
    110c:	ff 4f       	sbci	r31, 0xFF	; 255
    110e:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    1110:	cc 23       	and	r28, r28
    1112:	91 f0       	breq	.+36     	; 0x1138 <digitalRead+0x48>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1114:	81 11       	cpse	r24, r1
    1116:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    111a:	ec 2f       	mov	r30, r28
    111c:	f0 e0       	ldi	r31, 0x00	; 0
    111e:	ee 0f       	add	r30, r30
    1120:	ff 1f       	adc	r31, r31
    1122:	e8 54       	subi	r30, 0x48	; 72
    1124:	ff 4f       	sbci	r31, 0xFF	; 255
    1126:	a5 91       	lpm	r26, Z+
    1128:	b4 91       	lpm	r27, Z
    112a:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    112c:	ed 23       	and	r30, r29
    112e:	81 e0       	ldi	r24, 0x01	; 1
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	21 f4       	brne	.+8      	; 0x113c <digitalRead+0x4c>
    1134:	80 e0       	ldi	r24, 0x00	; 0
    1136:	02 c0       	rjmp	.+4      	; 0x113c <digitalRead+0x4c>
    1138:	80 e0       	ldi	r24, 0x00	; 0
    113a:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    113c:	df 91       	pop	r29
    113e:	cf 91       	pop	r28
    1140:	08 95       	ret

00001142 <__udivmodsi4>:
    1142:	a1 e2       	ldi	r26, 0x21	; 33
    1144:	1a 2e       	mov	r1, r26
    1146:	aa 1b       	sub	r26, r26
    1148:	bb 1b       	sub	r27, r27
    114a:	fd 01       	movw	r30, r26
    114c:	0d c0       	rjmp	.+26     	; 0x1168 <__udivmodsi4_ep>

0000114e <__udivmodsi4_loop>:
    114e:	aa 1f       	adc	r26, r26
    1150:	bb 1f       	adc	r27, r27
    1152:	ee 1f       	adc	r30, r30
    1154:	ff 1f       	adc	r31, r31
    1156:	a2 17       	cp	r26, r18
    1158:	b3 07       	cpc	r27, r19
    115a:	e4 07       	cpc	r30, r20
    115c:	f5 07       	cpc	r31, r21
    115e:	20 f0       	brcs	.+8      	; 0x1168 <__udivmodsi4_ep>
    1160:	a2 1b       	sub	r26, r18
    1162:	b3 0b       	sbc	r27, r19
    1164:	e4 0b       	sbc	r30, r20
    1166:	f5 0b       	sbc	r31, r21

00001168 <__udivmodsi4_ep>:
    1168:	66 1f       	adc	r22, r22
    116a:	77 1f       	adc	r23, r23
    116c:	88 1f       	adc	r24, r24
    116e:	99 1f       	adc	r25, r25
    1170:	1a 94       	dec	r1
    1172:	69 f7       	brne	.-38     	; 0x114e <__udivmodsi4_loop>
    1174:	60 95       	com	r22
    1176:	70 95       	com	r23
    1178:	80 95       	com	r24
    117a:	90 95       	com	r25
    117c:	9b 01       	movw	r18, r22
    117e:	ac 01       	movw	r20, r24
    1180:	bd 01       	movw	r22, r26
    1182:	cf 01       	movw	r24, r30
    1184:	08 95       	ret

00001186 <__tablejump2__>:
    1186:	ee 0f       	add	r30, r30
    1188:	ff 1f       	adc	r31, r31
    118a:	05 90       	lpm	r0, Z+
    118c:	f4 91       	lpm	r31, Z
    118e:	e0 2d       	mov	r30, r0
    1190:	09 94       	ijmp

00001192 <_exit>:
    1192:	f8 94       	cli

00001194 <__stop_program>:
    1194:	ff cf       	rjmp	.-2      	; 0x1194 <__stop_program>
