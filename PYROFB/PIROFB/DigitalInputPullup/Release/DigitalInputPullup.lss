
DigitalInputPullup.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000046  00800100  00000e2e  00000ec2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e2e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000f1  00800146  00800146  00000f08  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000f08  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f38  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002d0  00000000  00000000  00000f78  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00007f86  00000000  00000000  00001248  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001963  00000000  00000000  000091ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001cab  00000000  00000000  0000ab31  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000980  00000000  00000000  0000c7dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000223c  00000000  00000000  0000d15c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000036cd  00000000  00000000  0000f398  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002a8  00000000  00000000  00012a65  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__ctors_end>
   4:	0c 94 bf 01 	jmp	0x37e	; 0x37e <__vector_1>
   8:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__vector_2>
   c:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__vector_3>
  10:	0c 94 70 02 	jmp	0x4e0	; 0x4e0 <__vector_4>
  14:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__vector_5>
  18:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  1c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  20:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  24:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  28:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  2c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  30:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  34:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  38:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  3c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  40:	0c 94 ce 05 	jmp	0xb9c	; 0xb9c <__vector_16>
  44:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  48:	0c 94 da 04 	jmp	0x9b4	; 0x9b4 <__vector_18>
  4c:	0c 94 0c 05 	jmp	0xa18	; 0xa18 <__vector_19>
  50:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  54:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  58:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  5c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  60:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  64:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	00 01       	movw	r0, r0
  6a:	02 03       	mulsu	r16, r18
  6c:	04 05       	cpc	r16, r4
  6e:	06 07       	cpc	r16, r22
  70:	00 01       	movw	r0, r0
  72:	02 03       	mulsu	r16, r18
  74:	04 05       	cpc	r16, r4
  76:	00 01       	movw	r0, r0
  78:	02 03       	mulsu	r16, r18
  7a:	04 05       	cpc	r16, r4

0000007c <digital_pin_to_timer_PGM>:
  7c:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
  8c:	00 00 00 00                                         ....

00000090 <digital_pin_to_bit_mask_PGM>:
  90:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
  a0:	04 08 10 20                                         ... 

000000a4 <digital_pin_to_port_PGM>:
  a4:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
  b4:	03 03 03 03                                         ....

000000b8 <port_to_input_PGM>:
  b8:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000c2 <port_to_output_PGM>:
  c2:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000cc <port_to_mode_PGM>:
  cc:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000d6 <__ctors_start>:
  d6:	3c 05       	cpc	r19, r12

000000d8 <__ctors_end>:
  d8:	11 24       	eor	r1, r1
  da:	1f be       	out	0x3f, r1	; 63
  dc:	cf ef       	ldi	r28, 0xFF	; 255
  de:	d8 e0       	ldi	r29, 0x08	; 8
  e0:	de bf       	out	0x3e, r29	; 62
  e2:	cd bf       	out	0x3d, r28	; 61

000000e4 <__do_copy_data>:
  e4:	11 e0       	ldi	r17, 0x01	; 1
  e6:	a0 e0       	ldi	r26, 0x00	; 0
  e8:	b1 e0       	ldi	r27, 0x01	; 1
  ea:	ee e2       	ldi	r30, 0x2E	; 46
  ec:	fe e0       	ldi	r31, 0x0E	; 14
  ee:	02 c0       	rjmp	.+4      	; 0xf4 <__do_copy_data+0x10>
  f0:	05 90       	lpm	r0, Z+
  f2:	0d 92       	st	X+, r0
  f4:	a6 34       	cpi	r26, 0x46	; 70
  f6:	b1 07       	cpc	r27, r17
  f8:	d9 f7       	brne	.-10     	; 0xf0 <__do_copy_data+0xc>

000000fa <__do_clear_bss>:
  fa:	22 e0       	ldi	r18, 0x02	; 2
  fc:	a6 e4       	ldi	r26, 0x46	; 70
  fe:	b1 e0       	ldi	r27, 0x01	; 1
 100:	01 c0       	rjmp	.+2      	; 0x104 <.do_clear_bss_start>

00000102 <.do_clear_bss_loop>:
 102:	1d 92       	st	X+, r1

00000104 <.do_clear_bss_start>:
 104:	a7 33       	cpi	r26, 0x37	; 55
 106:	b2 07       	cpc	r27, r18
 108:	e1 f7       	brne	.-8      	; 0x102 <.do_clear_bss_loop>

0000010a <__do_global_ctors>:
 10a:	10 e0       	ldi	r17, 0x00	; 0
 10c:	cc e6       	ldi	r28, 0x6C	; 108
 10e:	d0 e0       	ldi	r29, 0x00	; 0
 110:	04 c0       	rjmp	.+8      	; 0x11a <__do_global_ctors+0x10>
 112:	21 97       	sbiw	r28, 0x01	; 1
 114:	fe 01       	movw	r30, r28
 116:	0e 94 0f 07 	call	0xe1e	; 0xe1e <__tablejump2__>
 11a:	cb 36       	cpi	r28, 0x6B	; 107
 11c:	d1 07       	cpc	r29, r17
 11e:	c9 f7       	brne	.-14     	; 0x112 <__do_global_ctors+0x8>
 120:	0e 94 6a 05 	call	0xad4	; 0xad4 <main>
 124:	0c 94 15 07 	jmp	0xe2a	; 0xe2a <_exit>

00000128 <__bad_interrupt>:
 128:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012c <_Z13SUBD_7_CHANGEv>:
#endif
#ifndef EI_NOTINT1
if (arduinoPin == 3) {
  EIMSK &= ~_BV(1);
  EICRA &= (~_BV(2) & ~_BV(3));
  EIFR  |= _BV(1); // using a clue from the ATmega2560 datasheet.
 12c:	0f 93       	push	r16
 12e:	1f 93       	push	r17
 130:	84 e0       	ldi	r24, 0x04	; 4
 132:	0e 94 c4 06 	call	0xd88	; 0xd88 <digitalRead>
 136:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <input>
 13a:	0e 94 18 06 	call	0xc30	; 0xc30 <millis>
 13e:	60 93 4c 01 	sts	0x014C, r22	; 0x80014c <refresh>
 142:	70 93 4d 01 	sts	0x014D, r23	; 0x80014d <refresh+0x1>
 146:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <refresh+0x2>
 14a:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <refresh+0x3>
 14e:	20 91 59 01 	lds	r18, 0x0159	; 0x800159 <input>
 152:	22 23       	and	r18, r18
 154:	01 f1       	breq	.+64     	; 0x196 <_Z13SUBD_7_CHANGEv+0x6a>
 156:	60 93 50 01 	sts	0x0150, r22	; 0x800150 <ms_rise>
 15a:	70 93 51 01 	sts	0x0151, r23	; 0x800151 <ms_rise+0x1>
 15e:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <ms_rise+0x2>
 162:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <ms_rise+0x3>
 166:	00 91 54 01 	lds	r16, 0x0154	; 0x800154 <ms_fall>
 16a:	10 91 55 01 	lds	r17, 0x0155	; 0x800155 <ms_fall+0x1>
 16e:	20 91 56 01 	lds	r18, 0x0156	; 0x800156 <ms_fall+0x2>
 172:	30 91 57 01 	lds	r19, 0x0157	; 0x800157 <ms_fall+0x3>
 176:	dc 01       	movw	r26, r24
 178:	cb 01       	movw	r24, r22
 17a:	80 1b       	sub	r24, r16
 17c:	91 0b       	sbc	r25, r17
 17e:	a2 0b       	sbc	r26, r18
 180:	b3 0b       	sbc	r27, r19
 182:	4f 97       	sbiw	r24, 0x1f	; 31
 184:	a1 05       	cpc	r26, r1
 186:	b1 05       	cpc	r27, r1
 188:	38 f1       	brcs	.+78     	; 0x1d8 <_Z13SUBD_7_CHANGEv+0xac>
 18a:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <CountImpulse>
 18e:	8f 5f       	subi	r24, 0xFF	; 255
 190:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <CountImpulse>
 194:	21 c0       	rjmp	.+66     	; 0x1d8 <_Z13SUBD_7_CHANGEv+0xac>
 196:	60 93 54 01 	sts	0x0154, r22	; 0x800154 <ms_fall>
 19a:	70 93 55 01 	sts	0x0155, r23	; 0x800155 <ms_fall+0x1>
 19e:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <ms_fall+0x2>
 1a2:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <ms_fall+0x3>
 1a6:	00 91 50 01 	lds	r16, 0x0150	; 0x800150 <ms_rise>
 1aa:	10 91 51 01 	lds	r17, 0x0151	; 0x800151 <ms_rise+0x1>
 1ae:	20 91 52 01 	lds	r18, 0x0152	; 0x800152 <ms_rise+0x2>
 1b2:	30 91 53 01 	lds	r19, 0x0153	; 0x800153 <ms_rise+0x3>
 1b6:	dc 01       	movw	r26, r24
 1b8:	cb 01       	movw	r24, r22
 1ba:	80 1b       	sub	r24, r16
 1bc:	91 0b       	sbc	r25, r17
 1be:	a2 0b       	sbc	r26, r18
 1c0:	b3 0b       	sbc	r27, r19
 1c2:	85 36       	cpi	r24, 0x65	; 101
 1c4:	91 05       	cpc	r25, r1
 1c6:	a1 05       	cpc	r26, r1
 1c8:	b1 05       	cpc	r27, r1
 1ca:	30 f0       	brcs	.+12     	; 0x1d8 <_Z13SUBD_7_CHANGEv+0xac>
 1cc:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <CountImpulse>
 1d0:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <CurrentMode>
 1d4:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <CountImpulse>
 1d8:	1f 91       	pop	r17
 1da:	0f 91       	pop	r16
 1dc:	08 95       	ret

000001de <_Z15enableInterrupthPFvvEh>:
 1de:	e8 2f       	mov	r30, r24
 1e0:	ef 77       	andi	r30, 0x7F	; 127
 1e2:	87 fd       	sbrc	r24, 7
 1e4:	05 c0       	rjmp	.+10     	; 0x1f0 <_Z15enableInterrupthPFvvEh+0x12>
 1e6:	8e ef       	ldi	r24, 0xFE	; 254
 1e8:	8e 0f       	add	r24, r30
 1ea:	82 30       	cpi	r24, 0x02	; 2
 1ec:	08 f4       	brcc	.+2      	; 0x1f0 <_Z15enableInterrupthPFvvEh+0x12>
 1ee:	9a c0       	rjmp	.+308    	; 0x324 <_Z15enableInterrupthPFvvEh+0x146>
 1f0:	8e 2f       	mov	r24, r30
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	fc 01       	movw	r30, r24
 1f6:	e0 57       	subi	r30, 0x70	; 112
 1f8:	ff 4f       	sbci	r31, 0xFF	; 255
 1fa:	24 91       	lpm	r18, Z
 1fc:	fc 01       	movw	r30, r24
 1fe:	ec 55       	subi	r30, 0x5C	; 92
 200:	ff 4f       	sbci	r31, 0xFF	; 255
 202:	34 91       	lpm	r19, Z
 204:	54 2f       	mov	r21, r20
 206:	5d 7f       	andi	r21, 0xFD	; 253
 208:	51 30       	cpi	r21, 0x01	; 1
 20a:	b9 f4       	brne	.+46     	; 0x23a <_Z15enableInterrupthPFvvEh+0x5c>
 20c:	32 30       	cpi	r19, 0x02	; 2
 20e:	31 f4       	brne	.+12     	; 0x21c <_Z15enableInterrupthPFvvEh+0x3e>
 210:	50 91 62 01 	lds	r21, 0x0162	; 0x800162 <risingPinsPORTB>
 214:	52 2b       	or	r21, r18
 216:	50 93 62 01 	sts	0x0162, r21	; 0x800162 <risingPinsPORTB>
 21a:	0f c0       	rjmp	.+30     	; 0x23a <_Z15enableInterrupthPFvvEh+0x5c>
 21c:	33 30       	cpi	r19, 0x03	; 3
 21e:	31 f4       	brne	.+12     	; 0x22c <_Z15enableInterrupthPFvvEh+0x4e>
 220:	50 91 5f 01 	lds	r21, 0x015F	; 0x80015f <risingPinsPORTC>
 224:	52 2b       	or	r21, r18
 226:	50 93 5f 01 	sts	0x015F, r21	; 0x80015f <risingPinsPORTC>
 22a:	07 c0       	rjmp	.+14     	; 0x23a <_Z15enableInterrupthPFvvEh+0x5c>
 22c:	34 30       	cpi	r19, 0x04	; 4
 22e:	29 f4       	brne	.+10     	; 0x23a <_Z15enableInterrupthPFvvEh+0x5c>
 230:	50 91 5c 01 	lds	r21, 0x015C	; 0x80015c <risingPinsPORTD>
 234:	52 2b       	or	r21, r18
 236:	50 93 5c 01 	sts	0x015C, r21	; 0x80015c <risingPinsPORTD>
 23a:	41 50       	subi	r20, 0x01	; 1
 23c:	42 30       	cpi	r20, 0x02	; 2
 23e:	b8 f4       	brcc	.+46     	; 0x26e <_Z15enableInterrupthPFvvEh+0x90>
 240:	32 30       	cpi	r19, 0x02	; 2
 242:	31 f4       	brne	.+12     	; 0x250 <_Z15enableInterrupthPFvvEh+0x72>
 244:	40 91 61 01 	lds	r20, 0x0161	; 0x800161 <fallingPinsPORTB>
 248:	42 2b       	or	r20, r18
 24a:	40 93 61 01 	sts	0x0161, r20	; 0x800161 <fallingPinsPORTB>
 24e:	0f c0       	rjmp	.+30     	; 0x26e <_Z15enableInterrupthPFvvEh+0x90>
 250:	33 30       	cpi	r19, 0x03	; 3
 252:	31 f4       	brne	.+12     	; 0x260 <_Z15enableInterrupthPFvvEh+0x82>
 254:	40 91 5e 01 	lds	r20, 0x015E	; 0x80015e <fallingPinsPORTC>
 258:	42 2b       	or	r20, r18
 25a:	40 93 5e 01 	sts	0x015E, r20	; 0x80015e <fallingPinsPORTC>
 25e:	07 c0       	rjmp	.+14     	; 0x26e <_Z15enableInterrupthPFvvEh+0x90>
 260:	34 30       	cpi	r19, 0x04	; 4
 262:	29 f4       	brne	.+10     	; 0x26e <_Z15enableInterrupthPFvvEh+0x90>
 264:	40 91 5b 01 	lds	r20, 0x015B	; 0x80015b <fallingPinsPORTD>
 268:	42 2b       	or	r20, r18
 26a:	40 93 5b 01 	sts	0x015B, r20	; 0x80015b <fallingPinsPORTD>
 26e:	fc 01       	movw	r30, r24
 270:	e8 59       	subi	r30, 0x98	; 152
 272:	ff 4f       	sbci	r31, 0xFF	; 255
 274:	a4 91       	lpm	r26, Z
 276:	32 30       	cpi	r19, 0x02	; 2
 278:	c1 f4       	brne	.+48     	; 0x2aa <_Z15enableInterrupthPFvvEh+0xcc>
 27a:	b0 e0       	ldi	r27, 0x00	; 0
 27c:	aa 0f       	add	r26, r26
 27e:	bb 1f       	adc	r27, r27
 280:	a1 58       	subi	r26, 0x81	; 129
 282:	be 4f       	sbci	r27, 0xFE	; 254
 284:	6d 93       	st	X+, r22
 286:	7c 93       	st	X, r23
 288:	ec eb       	ldi	r30, 0xBC	; 188
 28a:	f0 e0       	ldi	r31, 0x00	; 0
 28c:	a5 91       	lpm	r26, Z+
 28e:	b4 91       	lpm	r27, Z
 290:	8c 91       	ld	r24, X
 292:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <_ZL13portSnapshotB>
 296:	8b e6       	ldi	r24, 0x6B	; 107
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	90 93 90 01 	sts	0x0190, r25	; 0x800190 <pcmsk+0x1>
 29e:	80 93 8f 01 	sts	0x018F, r24	; 0x80018f <pcmsk>
 2a2:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
 2a6:	81 60       	ori	r24, 0x01	; 1
 2a8:	33 c0       	rjmp	.+102    	; 0x310 <_Z15enableInterrupthPFvvEh+0x132>
 2aa:	33 30       	cpi	r19, 0x03	; 3
 2ac:	c1 f4       	brne	.+48     	; 0x2de <_Z15enableInterrupthPFvvEh+0x100>
 2ae:	b0 e0       	ldi	r27, 0x00	; 0
 2b0:	aa 0f       	add	r26, r26
 2b2:	bb 1f       	adc	r27, r27
 2b4:	ad 58       	subi	r26, 0x8D	; 141
 2b6:	be 4f       	sbci	r27, 0xFE	; 254
 2b8:	6d 93       	st	X+, r22
 2ba:	7c 93       	st	X, r23
 2bc:	ee eb       	ldi	r30, 0xBE	; 190
 2be:	f0 e0       	ldi	r31, 0x00	; 0
 2c0:	a5 91       	lpm	r26, Z+
 2c2:	b4 91       	lpm	r27, Z
 2c4:	8c 91       	ld	r24, X
 2c6:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <_ZL13portSnapshotC>
 2ca:	8c e6       	ldi	r24, 0x6C	; 108
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	90 93 90 01 	sts	0x0190, r25	; 0x800190 <pcmsk+0x1>
 2d2:	80 93 8f 01 	sts	0x018F, r24	; 0x80018f <pcmsk>
 2d6:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
 2da:	82 60       	ori	r24, 0x02	; 2
 2dc:	19 c0       	rjmp	.+50     	; 0x310 <_Z15enableInterrupthPFvvEh+0x132>
 2de:	34 30       	cpi	r19, 0x04	; 4
 2e0:	c9 f4       	brne	.+50     	; 0x314 <_Z15enableInterrupthPFvvEh+0x136>
 2e2:	b0 e0       	ldi	r27, 0x00	; 0
 2e4:	aa 0f       	add	r26, r26
 2e6:	bb 1f       	adc	r27, r27
 2e8:	ad 59       	subi	r26, 0x9D	; 157
 2ea:	be 4f       	sbci	r27, 0xFE	; 254
 2ec:	6d 93       	st	X+, r22
 2ee:	7c 93       	st	X, r23
 2f0:	e0 ec       	ldi	r30, 0xC0	; 192
 2f2:	f0 e0       	ldi	r31, 0x00	; 0
 2f4:	a5 91       	lpm	r26, Z+
 2f6:	b4 91       	lpm	r27, Z
 2f8:	8c 91       	ld	r24, X
 2fa:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <_ZL13portSnapshotD>
 2fe:	8d e6       	ldi	r24, 0x6D	; 109
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	90 93 90 01 	sts	0x0190, r25	; 0x800190 <pcmsk+0x1>
 306:	80 93 8f 01 	sts	0x018F, r24	; 0x80018f <pcmsk>
 30a:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
 30e:	84 60       	ori	r24, 0x04	; 4
 310:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
 314:	a0 91 8f 01 	lds	r26, 0x018F	; 0x80018f <pcmsk>
 318:	b0 91 90 01 	lds	r27, 0x0190	; 0x800190 <pcmsk+0x1>
 31c:	ec 91       	ld	r30, X
 31e:	2e 2b       	or	r18, r30
 320:	2c 93       	st	X, r18
 322:	08 95       	ret
 324:	9f b7       	in	r25, 0x3f	; 63
 326:	f8 94       	cli
 328:	e2 30       	cpi	r30, 0x02	; 2
 32a:	99 f4       	brne	.+38     	; 0x352 <_Z15enableInterrupthPFvvEh+0x174>
 32c:	70 93 8c 01 	sts	0x018C, r23	; 0x80018c <functionPointerArrayEXTERNAL+0x1>
 330:	60 93 8b 01 	sts	0x018B, r22	; 0x80018b <functionPointerArrayEXTERNAL>
 334:	e8 98       	cbi	0x1d, 0	; 29
 336:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
 33a:	8c 7f       	andi	r24, 0xFC	; 252
 33c:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
 340:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
 344:	48 2b       	or	r20, r24
 346:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
 34a:	e0 9a       	sbi	0x1c, 0	; 28
 34c:	e8 9a       	sbi	0x1d, 0	; 29
 34e:	9f bf       	out	0x3f, r25	; 63
 350:	08 95       	ret
 352:	70 93 8e 01 	sts	0x018E, r23	; 0x80018e <functionPointerArrayEXTERNAL+0x3>
 356:	60 93 8d 01 	sts	0x018D, r22	; 0x80018d <functionPointerArrayEXTERNAL+0x2>
 35a:	e9 98       	cbi	0x1d, 1	; 29
 35c:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
 360:	83 7f       	andi	r24, 0xF3	; 243
 362:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
 366:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
 36a:	24 e0       	ldi	r18, 0x04	; 4
 36c:	42 9f       	mul	r20, r18
 36e:	a0 01       	movw	r20, r0
 370:	11 24       	eor	r1, r1
 372:	48 2b       	or	r20, r24
 374:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
 378:	e1 9a       	sbi	0x1c, 1	; 28
 37a:	e9 9a       	sbi	0x1d, 1	; 29
 37c:	e8 cf       	rjmp	.-48     	; 0x34e <_Z15enableInterrupthPFvvEh+0x170>

0000037e <__vector_1>:
// *************************************************************************************
// External Interrupts
// *************************************************************************************
#ifndef EI_NOTEXTERNAL
#ifndef EI_NOTINT0
ISR(INT0_vect) {/*{{{*/
 37e:	1f 92       	push	r1
 380:	0f 92       	push	r0
 382:	0f b6       	in	r0, 0x3f	; 63
 384:	0f 92       	push	r0
 386:	11 24       	eor	r1, r1
 388:	2f 93       	push	r18
 38a:	3f 93       	push	r19
 38c:	4f 93       	push	r20
 38e:	5f 93       	push	r21
 390:	6f 93       	push	r22
 392:	7f 93       	push	r23
 394:	8f 93       	push	r24
 396:	9f 93       	push	r25
 398:	af 93       	push	r26
 39a:	bf 93       	push	r27
 39c:	ef 93       	push	r30
 39e:	ff 93       	push	r31
#elif defined EI_ATTINY25
  arduinoInterruptedPin=ARDUINO_PIN_B0; arduinoPinState=PINB & _BV(0);
#endif
#endif // EI_ARDUINO_INTERRUPTED_PIN
#if ! defined EI_ATTINY25 && ! defined EI_ATTINY24
  (*functionPointerArrayEXTERNAL[0])();
 3a0:	e0 91 8b 01 	lds	r30, 0x018B	; 0x80018b <functionPointerArrayEXTERNAL>
 3a4:	f0 91 8c 01 	lds	r31, 0x018C	; 0x80018c <functionPointerArrayEXTERNAL+0x1>
 3a8:	09 95       	icall
  INTERRUPT_FLAG_PIN2++;
#endif
#endif

#endif // NEEDFORSPEED
}/*}}}*/
 3aa:	ff 91       	pop	r31
 3ac:	ef 91       	pop	r30
 3ae:	bf 91       	pop	r27
 3b0:	af 91       	pop	r26
 3b2:	9f 91       	pop	r25
 3b4:	8f 91       	pop	r24
 3b6:	7f 91       	pop	r23
 3b8:	6f 91       	pop	r22
 3ba:	5f 91       	pop	r21
 3bc:	4f 91       	pop	r20
 3be:	3f 91       	pop	r19
 3c0:	2f 91       	pop	r18
 3c2:	0f 90       	pop	r0
 3c4:	0f be       	out	0x3f, r0	; 63
 3c6:	0f 90       	pop	r0
 3c8:	1f 90       	pop	r1
 3ca:	18 95       	reti

000003cc <__vector_2>:
#endif // EI_NOTINT0

#if ! defined(EI_ATTINY24) && ! defined(EI_ATTINY25)
#ifndef EI_NOTINT1
ISR(INT1_vect) {/*{{{*/
 3cc:	1f 92       	push	r1
 3ce:	0f 92       	push	r0
 3d0:	0f b6       	in	r0, 0x3f	; 63
 3d2:	0f 92       	push	r0
 3d4:	11 24       	eor	r1, r1
 3d6:	2f 93       	push	r18
 3d8:	3f 93       	push	r19
 3da:	4f 93       	push	r20
 3dc:	5f 93       	push	r21
 3de:	6f 93       	push	r22
 3e0:	7f 93       	push	r23
 3e2:	8f 93       	push	r24
 3e4:	9f 93       	push	r25
 3e6:	af 93       	push	r26
 3e8:	bf 93       	push	r27
 3ea:	ef 93       	push	r30
 3ec:	ff 93       	push	r31
  arduinoInterruptedPin=ARDUINO_PIN_D1; arduinoPinState=PIND & _BV(1);
#elif defined ARDUINO_328
  arduinoInterruptedPin=ARDUINO_PIN_D3; arduinoPinState=PIND & _BV(3);
#endif
#endif // EI_ARDUINO_INTERRUPTED_PIN
  (*functionPointerArrayEXTERNAL[1])();
 3ee:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <functionPointerArrayEXTERNAL+0x2>
 3f2:	f0 91 8e 01 	lds	r31, 0x018E	; 0x80018e <functionPointerArrayEXTERNAL+0x3>
 3f6:	09 95       	icall
#ifdef INTERRUPT_FLAG_PIN3
  INTERRUPT_FLAG_PIN3++;
#endif
#endif
#endif // NEEDFORSPEED
}/*}}}*/
 3f8:	ff 91       	pop	r31
 3fa:	ef 91       	pop	r30
 3fc:	bf 91       	pop	r27
 3fe:	af 91       	pop	r26
 400:	9f 91       	pop	r25
 402:	8f 91       	pop	r24
 404:	7f 91       	pop	r23
 406:	6f 91       	pop	r22
 408:	5f 91       	pop	r21
 40a:	4f 91       	pop	r20
 40c:	3f 91       	pop	r19
 40e:	2f 91       	pop	r18
 410:	0f 90       	pop	r0
 412:	0f be       	out	0x3f, r0	; 63
 414:	0f 90       	pop	r0
 416:	1f 90       	pop	r1
 418:	18 95       	reti

0000041a <__vector_3>:
  // exitPORTBISR: PORTC &= ~(1 << PC5); // SIGNAL THAT WE ARE LEAVING THE INTERRUPT
}/*}}}*/
#endif // EI_NOTPORTA

#ifndef EI_NOTPORTB
ISR(PORTB_VECT) {/*{{{*/
 41a:	1f 92       	push	r1
 41c:	0f 92       	push	r0
 41e:	0f b6       	in	r0, 0x3f	; 63
 420:	0f 92       	push	r0
 422:	11 24       	eor	r1, r1
 424:	2f 93       	push	r18
 426:	3f 93       	push	r19
 428:	4f 93       	push	r20
 42a:	5f 93       	push	r21
 42c:	6f 93       	push	r22
 42e:	7f 93       	push	r23
 430:	8f 93       	push	r24
 432:	9f 93       	push	r25
 434:	af 93       	push	r26
 436:	bf 93       	push	r27
 438:	cf 93       	push	r28
 43a:	ef 93       	push	r30
 43c:	ff 93       	push	r31
  uint8_t current;
  uint8_t interruptMask;
  uint8_t changedPins;
  uint8_t tmp;

  current=PINB;
 43e:	23 b1       	in	r18, 0x03	; 3
// If we trust the compiler to do this, it will use an extra register...
//  changedPins=(portSnapshotB ^ current) &
//                                       ((risingPinsPORTB & current) | (fallingPinsPORTB & ~current));
// ...so we do it ourselves:
  changedPins   = portSnapshotB ^ current;
 440:	c0 91 60 01 	lds	r28, 0x0160	; 0x800160 <_ZL13portSnapshotB>
  tmp           = risingPinsPORTB & current;
 444:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <risingPinsPORTB>
  interruptMask = fallingPinsPORTB & ~current;
 448:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <fallingPinsPORTB>
 44c:	32 2f       	mov	r19, r18
 44e:	30 95       	com	r19
 450:	93 23       	and	r25, r19
  interruptMask = interruptMask | tmp;
 452:	82 23       	and	r24, r18
 454:	89 2b       	or	r24, r25
  interruptMask = PCMSK1 & interruptMask;
#else
#ifdef EI_ATTINY25
  interruptMask = PCMSK & interruptMask;
#else
  interruptMask = PCMSK0 & interruptMask;
 456:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
 45a:	c2 27       	eor	r28, r18
 45c:	c9 23       	and	r28, r25
 45e:	c8 23       	and	r28, r24
#endif
#endif

  portSnapshotB = current;
 460:	20 93 60 01 	sts	0x0160, r18	; 0x800160 <_ZL13portSnapshotB>
#ifdef NEEDFORSPEED
#include "utility/ei_portb_speed.h"
#else
  if (interruptMask == 0) goto exitPORTBISR; // get out quickly if not interested.
 464:	cc 23       	and	r28, r28
 466:	51 f1       	breq	.+84     	; 0x4bc <__vector_3+0xa2>
#if ! (defined ARDUINO_328) && ! (defined EI_ATTINY24) && ! (defined EI_ATTINY25)
  if (interruptMask & _BV(6)) { arduinoInterruptedPin=ARDUINO_PIN_B6; arduinoPinState=current & _BV(6); portBFunctions.pinSix(); }
  if (interruptMask & _BV(7)) { arduinoInterruptedPin=ARDUINO_PIN_B7; arduinoPinState=current & _BV(7); portBFunctions.pinSeven(); }
#endif
#else // EI_ARDUINO_INTERRUPTED_PIN
  if (interruptMask & _BV(0)) portBFunctions.pinZero();
 468:	c0 ff       	sbrs	r28, 0
 46a:	05 c0       	rjmp	.+10     	; 0x476 <__vector_3+0x5c>
 46c:	e0 91 7f 01 	lds	r30, 0x017F	; 0x80017f <portBFunctions>
 470:	f0 91 80 01 	lds	r31, 0x0180	; 0x800180 <portBFunctions+0x1>
 474:	09 95       	icall
  if (interruptMask & _BV(1)) portBFunctions.pinOne();
 476:	c1 ff       	sbrs	r28, 1
 478:	05 c0       	rjmp	.+10     	; 0x484 <__vector_3+0x6a>
 47a:	e0 91 81 01 	lds	r30, 0x0181	; 0x800181 <portBFunctions+0x2>
 47e:	f0 91 82 01 	lds	r31, 0x0182	; 0x800182 <portBFunctions+0x3>
 482:	09 95       	icall
  if (interruptMask & _BV(2)) portBFunctions.pinTwo();
 484:	c2 ff       	sbrs	r28, 2
 486:	05 c0       	rjmp	.+10     	; 0x492 <__vector_3+0x78>
 488:	e0 91 83 01 	lds	r30, 0x0183	; 0x800183 <portBFunctions+0x4>
 48c:	f0 91 84 01 	lds	r31, 0x0184	; 0x800184 <portBFunctions+0x5>
 490:	09 95       	icall
  if (interruptMask & _BV(3)) portBFunctions.pinThree();
 492:	c3 ff       	sbrs	r28, 3
 494:	05 c0       	rjmp	.+10     	; 0x4a0 <__vector_3+0x86>
 496:	e0 91 85 01 	lds	r30, 0x0185	; 0x800185 <portBFunctions+0x6>
 49a:	f0 91 86 01 	lds	r31, 0x0186	; 0x800186 <portBFunctions+0x7>
 49e:	09 95       	icall
#if ! (defined EI_ATTINY24)
  if (interruptMask & _BV(4)) portBFunctions.pinFour();
 4a0:	c4 ff       	sbrs	r28, 4
 4a2:	05 c0       	rjmp	.+10     	; 0x4ae <__vector_3+0x94>
 4a4:	e0 91 87 01 	lds	r30, 0x0187	; 0x800187 <portBFunctions+0x8>
 4a8:	f0 91 88 01 	lds	r31, 0x0188	; 0x800188 <portBFunctions+0x9>
 4ac:	09 95       	icall
  if (interruptMask & _BV(5)) portBFunctions.pinFive();
 4ae:	c5 ff       	sbrs	r28, 5
 4b0:	05 c0       	rjmp	.+10     	; 0x4bc <__vector_3+0xa2>
 4b2:	e0 91 89 01 	lds	r30, 0x0189	; 0x800189 <portBFunctions+0xa>
 4b6:	f0 91 8a 01 	lds	r31, 0x018A	; 0x80018a <portBFunctions+0xb>
 4ba:	09 95       	icall
#endif // EI_ARDUINO_INTERRUPTED_PIN
  exitPORTBISR: return;
  // FOR MEASUREMENT ONLY
  // exitPORTBISR: PORTC &= ~(1 << PC5); // SIGNAL THAT WE ARE LEAVING THE INTERRUPT
#endif // NEEDFORSPEED
}/*}}}*/
 4bc:	ff 91       	pop	r31
 4be:	ef 91       	pop	r30
 4c0:	cf 91       	pop	r28
 4c2:	bf 91       	pop	r27
 4c4:	af 91       	pop	r26
 4c6:	9f 91       	pop	r25
 4c8:	8f 91       	pop	r24
 4ca:	7f 91       	pop	r23
 4cc:	6f 91       	pop	r22
 4ce:	5f 91       	pop	r21
 4d0:	4f 91       	pop	r20
 4d2:	3f 91       	pop	r19
 4d4:	2f 91       	pop	r18
 4d6:	0f 90       	pop	r0
 4d8:	0f be       	out	0x3f, r0	; 63
 4da:	0f 90       	pop	r0
 4dc:	1f 90       	pop	r1
 4de:	18 95       	reti

000004e0 <__vector_4>:
#endif // EI_NOTPORTB

#ifndef EI_NOTPORTC
ISR(PORTC_VECT) {/*{{{*/
 4e0:	1f 92       	push	r1
 4e2:	0f 92       	push	r0
 4e4:	0f b6       	in	r0, 0x3f	; 63
 4e6:	0f 92       	push	r0
 4e8:	11 24       	eor	r1, r1
 4ea:	2f 93       	push	r18
 4ec:	3f 93       	push	r19
 4ee:	4f 93       	push	r20
 4f0:	5f 93       	push	r21
 4f2:	6f 93       	push	r22
 4f4:	7f 93       	push	r23
 4f6:	8f 93       	push	r24
 4f8:	9f 93       	push	r25
 4fa:	af 93       	push	r26
 4fc:	bf 93       	push	r27
 4fe:	cf 93       	push	r28
 500:	ef 93       	push	r30
 502:	ff 93       	push	r31
  uint8_t current;
  uint8_t interruptMask;
  uint8_t changedPins;
  uint8_t tmp;

  current=PINC;
 504:	26 b1       	in	r18, 0x06	; 6
// If we trust the compiler to do this, it will use an extra register...
//  changedPins=(portSnapshotB ^ current) &
//                                       ((risingPinsPORTB & current) | (fallingPinsPORTB & ~current));
// ...so we do it ourselves:
  changedPins   = portSnapshotC ^ current;
 506:	c0 91 5d 01 	lds	r28, 0x015D	; 0x80015d <_ZL13portSnapshotC>
  tmp           = risingPinsPORTC & current;
 50a:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <risingPinsPORTC>
  interruptMask = fallingPinsPORTC & ~current;
 50e:	90 91 5e 01 	lds	r25, 0x015E	; 0x80015e <fallingPinsPORTC>
 512:	32 2f       	mov	r19, r18
 514:	30 95       	com	r19
 516:	93 23       	and	r25, r19
  interruptMask = interruptMask | tmp;
 518:	82 23       	and	r24, r18
 51a:	89 2b       	or	r24, r25
  interruptMask = changedPins & interruptMask;
#if (defined MIGHTY1284)
  interruptMask = PCMSK2 & interruptMask;
#else
  interruptMask = PCMSK1 & interruptMask;
 51c:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <__TEXT_REGION_LENGTH__+0x7e006c>
 520:	c2 27       	eor	r28, r18
 522:	c9 23       	and	r28, r25
 524:	c8 23       	and	r28, r24
#endif

  portSnapshotC = current;
 526:	20 93 5d 01 	sts	0x015D, r18	; 0x80015d <_ZL13portSnapshotC>
#ifdef NEEDFORSPEED
#include "utility/ei_portc_speed.h"
#else
  if (interruptMask == 0) goto exitPORTCISR; // get out quickly if not interested.
 52a:	cc 23       	and	r28, r28
 52c:	51 f1       	breq	.+84     	; 0x582 <__vector_4+0xa2>
#ifdef MIGHTY1284
  if (interruptMask & _BV(6)) { arduinoInterruptedPin=ARDUINO_PIN_C6; arduinoPinState=current & _BV(6); portCFunctions.pinSix(); }
  if (interruptMask & _BV(7)) { arduinoInterruptedPin=ARDUINO_PIN_C7; arduinoPinState=current & _BV(7); portCFunctions.pinSeven(); }
#endif
#else
  if (interruptMask & _BV(0)) portCFunctions.pinZero();
 52e:	c0 ff       	sbrs	r28, 0
 530:	05 c0       	rjmp	.+10     	; 0x53c <__vector_4+0x5c>
 532:	e0 91 73 01 	lds	r30, 0x0173	; 0x800173 <portCFunctions>
 536:	f0 91 74 01 	lds	r31, 0x0174	; 0x800174 <portCFunctions+0x1>
 53a:	09 95       	icall
  if (interruptMask & _BV(1)) portCFunctions.pinOne();
 53c:	c1 ff       	sbrs	r28, 1
 53e:	05 c0       	rjmp	.+10     	; 0x54a <__vector_4+0x6a>
 540:	e0 91 75 01 	lds	r30, 0x0175	; 0x800175 <portCFunctions+0x2>
 544:	f0 91 76 01 	lds	r31, 0x0176	; 0x800176 <portCFunctions+0x3>
 548:	09 95       	icall
  if (interruptMask & _BV(2)) portCFunctions.pinTwo();
 54a:	c2 ff       	sbrs	r28, 2
 54c:	05 c0       	rjmp	.+10     	; 0x558 <__vector_4+0x78>
 54e:	e0 91 77 01 	lds	r30, 0x0177	; 0x800177 <portCFunctions+0x4>
 552:	f0 91 78 01 	lds	r31, 0x0178	; 0x800178 <portCFunctions+0x5>
 556:	09 95       	icall
  if (interruptMask & _BV(3)) portCFunctions.pinThree();
 558:	c3 ff       	sbrs	r28, 3
 55a:	05 c0       	rjmp	.+10     	; 0x566 <__vector_4+0x86>
 55c:	e0 91 79 01 	lds	r30, 0x0179	; 0x800179 <portCFunctions+0x6>
 560:	f0 91 7a 01 	lds	r31, 0x017A	; 0x80017a <portCFunctions+0x7>
 564:	09 95       	icall
  if (interruptMask & _BV(4)) portCFunctions.pinFour();
 566:	c4 ff       	sbrs	r28, 4
 568:	05 c0       	rjmp	.+10     	; 0x574 <__vector_4+0x94>
 56a:	e0 91 7b 01 	lds	r30, 0x017B	; 0x80017b <portCFunctions+0x8>
 56e:	f0 91 7c 01 	lds	r31, 0x017C	; 0x80017c <portCFunctions+0x9>
 572:	09 95       	icall
  if (interruptMask & _BV(5)) portCFunctions.pinFive();
 574:	c5 ff       	sbrs	r28, 5
 576:	05 c0       	rjmp	.+10     	; 0x582 <__vector_4+0xa2>
 578:	e0 91 7d 01 	lds	r30, 0x017D	; 0x80017d <portCFunctions+0xa>
 57c:	f0 91 7e 01 	lds	r31, 0x017E	; 0x80017e <portCFunctions+0xb>
 580:	09 95       	icall
  if (interruptMask & _BV(7)) portCFunctions.pinSeven();
#endif
#endif // EI_ARDUINO_INTERRUPTED_PIN
  exitPORTCISR: return;
#endif // NEEDFORSPEED
}/*}}}*/
 582:	ff 91       	pop	r31
 584:	ef 91       	pop	r30
 586:	cf 91       	pop	r28
 588:	bf 91       	pop	r27
 58a:	af 91       	pop	r26
 58c:	9f 91       	pop	r25
 58e:	8f 91       	pop	r24
 590:	7f 91       	pop	r23
 592:	6f 91       	pop	r22
 594:	5f 91       	pop	r21
 596:	4f 91       	pop	r20
 598:	3f 91       	pop	r19
 59a:	2f 91       	pop	r18
 59c:	0f 90       	pop	r0
 59e:	0f be       	out	0x3f, r0	; 63
 5a0:	0f 90       	pop	r0
 5a2:	1f 90       	pop	r1
 5a4:	18 95       	reti

000005a6 <__vector_5>:
#endif // EI_NOTPORTC

#ifndef EI_NOTPORTD
ISR(PORTD_VECT) {/*{{{*/
 5a6:	1f 92       	push	r1
 5a8:	0f 92       	push	r0
 5aa:	0f b6       	in	r0, 0x3f	; 63
 5ac:	0f 92       	push	r0
 5ae:	11 24       	eor	r1, r1
 5b0:	2f 93       	push	r18
 5b2:	3f 93       	push	r19
 5b4:	4f 93       	push	r20
 5b6:	5f 93       	push	r21
 5b8:	6f 93       	push	r22
 5ba:	7f 93       	push	r23
 5bc:	8f 93       	push	r24
 5be:	9f 93       	push	r25
 5c0:	af 93       	push	r26
 5c2:	bf 93       	push	r27
 5c4:	cf 93       	push	r28
 5c6:	ef 93       	push	r30
 5c8:	ff 93       	push	r31
  uint8_t current;
  uint8_t interruptMask;
  uint8_t changedPins;
  uint8_t tmp;

  current=PIND;
 5ca:	29 b1       	in	r18, 0x09	; 9
// If we trust the compiler to do this, it will use an extra register...
//  changedPins=(portSnapshotB ^ current) &
//                                       ((risingPinsPORTB & current) | (fallingPinsPORTB & ~current));
// ...so we do it ourselves:
  changedPins   = portSnapshotD ^ current;
 5cc:	c0 91 5a 01 	lds	r28, 0x015A	; 0x80015a <_ZL13portSnapshotD>
  tmp           = risingPinsPORTD & current;
 5d0:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <risingPinsPORTD>
  interruptMask = fallingPinsPORTD & ~current;
 5d4:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <fallingPinsPORTD>
 5d8:	32 2f       	mov	r19, r18
 5da:	30 95       	com	r19
 5dc:	93 23       	and	r25, r19
  interruptMask = interruptMask | tmp;
 5de:	82 23       	and	r24, r18
 5e0:	89 2b       	or	r24, r25
  interruptMask = changedPins & interruptMask;
#if (defined MIGHTY1284)
  interruptMask = PCMSK3 & interruptMask;
#else
  interruptMask = PCMSK2 & interruptMask;
 5e2:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <__TEXT_REGION_LENGTH__+0x7e006d>
 5e6:	c2 27       	eor	r28, r18
 5e8:	c9 23       	and	r28, r25
 5ea:	c8 23       	and	r28, r24
#endif

  portSnapshotD = current;
 5ec:	20 93 5a 01 	sts	0x015A, r18	; 0x80015a <_ZL13portSnapshotD>
#ifdef NEEDFORSPEED
#include "utility/ei_portd_speed.h"
#else
  if (interruptMask == 0) goto exitPORTDISR; // get out quickly if not interested.
 5f0:	cc 23       	and	r28, r28
 5f2:	c1 f1       	breq	.+112    	; 0x664 <__vector_5+0xbe>
  if (interruptMask & _BV(4)) { arduinoInterruptedPin=ARDUINO_PIN_D4; arduinoPinState=current & _BV(4); portDFunctions.pinFour(); }
  if (interruptMask & _BV(5)) { arduinoInterruptedPin=ARDUINO_PIN_D5; arduinoPinState=current & _BV(5); portDFunctions.pinFive(); }
  if (interruptMask & _BV(6)) { arduinoInterruptedPin=ARDUINO_PIN_D6; arduinoPinState=current & _BV(6); portDFunctions.pinSix(); }
  if (interruptMask & _BV(7)) { arduinoInterruptedPin=ARDUINO_PIN_D7; arduinoPinState=current & _BV(7); portDFunctions.pinSeven(); }
#else
  if (interruptMask & _BV(0)) portDFunctions.pinZero();
 5f4:	c0 ff       	sbrs	r28, 0
 5f6:	05 c0       	rjmp	.+10     	; 0x602 <__vector_5+0x5c>
 5f8:	e0 91 63 01 	lds	r30, 0x0163	; 0x800163 <portDFunctions>
 5fc:	f0 91 64 01 	lds	r31, 0x0164	; 0x800164 <portDFunctions+0x1>
 600:	09 95       	icall
  if (interruptMask & _BV(1)) portDFunctions.pinOne();
 602:	c1 ff       	sbrs	r28, 1
 604:	05 c0       	rjmp	.+10     	; 0x610 <__vector_5+0x6a>
 606:	e0 91 65 01 	lds	r30, 0x0165	; 0x800165 <portDFunctions+0x2>
 60a:	f0 91 66 01 	lds	r31, 0x0166	; 0x800166 <portDFunctions+0x3>
 60e:	09 95       	icall
  if (interruptMask & _BV(2)) portDFunctions.pinTwo();
 610:	c2 ff       	sbrs	r28, 2
 612:	05 c0       	rjmp	.+10     	; 0x61e <__vector_5+0x78>
 614:	e0 91 67 01 	lds	r30, 0x0167	; 0x800167 <portDFunctions+0x4>
 618:	f0 91 68 01 	lds	r31, 0x0168	; 0x800168 <portDFunctions+0x5>
 61c:	09 95       	icall
  if (interruptMask & _BV(3)) portDFunctions.pinThree();
 61e:	c3 ff       	sbrs	r28, 3
 620:	05 c0       	rjmp	.+10     	; 0x62c <__vector_5+0x86>
 622:	e0 91 69 01 	lds	r30, 0x0169	; 0x800169 <portDFunctions+0x6>
 626:	f0 91 6a 01 	lds	r31, 0x016A	; 0x80016a <portDFunctions+0x7>
 62a:	09 95       	icall
  if (interruptMask & _BV(4)) portDFunctions.pinFour();
 62c:	c4 ff       	sbrs	r28, 4
 62e:	05 c0       	rjmp	.+10     	; 0x63a <__vector_5+0x94>
 630:	e0 91 6b 01 	lds	r30, 0x016B	; 0x80016b <portDFunctions+0x8>
 634:	f0 91 6c 01 	lds	r31, 0x016C	; 0x80016c <portDFunctions+0x9>
 638:	09 95       	icall
  if (interruptMask & _BV(5)) portDFunctions.pinFive();
 63a:	c5 ff       	sbrs	r28, 5
 63c:	05 c0       	rjmp	.+10     	; 0x648 <__vector_5+0xa2>
 63e:	e0 91 6d 01 	lds	r30, 0x016D	; 0x80016d <portDFunctions+0xa>
 642:	f0 91 6e 01 	lds	r31, 0x016E	; 0x80016e <portDFunctions+0xb>
 646:	09 95       	icall
  if (interruptMask & _BV(6)) portDFunctions.pinSix();
 648:	c6 ff       	sbrs	r28, 6
 64a:	05 c0       	rjmp	.+10     	; 0x656 <__vector_5+0xb0>
 64c:	e0 91 6f 01 	lds	r30, 0x016F	; 0x80016f <portDFunctions+0xc>
 650:	f0 91 70 01 	lds	r31, 0x0170	; 0x800170 <portDFunctions+0xd>
 654:	09 95       	icall
  if (interruptMask & _BV(7)) portDFunctions.pinSeven();
 656:	c7 ff       	sbrs	r28, 7
 658:	05 c0       	rjmp	.+10     	; 0x664 <__vector_5+0xbe>
 65a:	e0 91 71 01 	lds	r30, 0x0171	; 0x800171 <portDFunctions+0xe>
 65e:	f0 91 72 01 	lds	r31, 0x0172	; 0x800172 <portDFunctions+0xf>
 662:	09 95       	icall
#endif // EI_ARDUINO_INTERRUPTED_PIN
  exitPORTDISR: return;
#endif // NEEDFORSPEED
}/*}}}*/
 664:	ff 91       	pop	r31
 666:	ef 91       	pop	r30
 668:	cf 91       	pop	r28
 66a:	bf 91       	pop	r27
 66c:	af 91       	pop	r26
 66e:	9f 91       	pop	r25
 670:	8f 91       	pop	r24
 672:	7f 91       	pop	r23
 674:	6f 91       	pop	r22
 676:	5f 91       	pop	r21
 678:	4f 91       	pop	r20
 67a:	3f 91       	pop	r19
 67c:	2f 91       	pop	r18
 67e:	0f 90       	pop	r0
 680:	0f be       	out	0x3f, r0	; 63
 682:	0f 90       	pop	r0
 684:	1f 90       	pop	r1
 686:	18 95       	reti

00000688 <setup>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
 688:	26 e0       	ldi	r18, 0x06	; 6
 68a:	40 e8       	ldi	r20, 0x80	; 128
 68c:	55 e2       	ldi	r21, 0x25	; 37
 68e:	60 e0       	ldi	r22, 0x00	; 0
 690:	70 e0       	ldi	r23, 0x00	; 0
 692:	81 e9       	ldi	r24, 0x91	; 145
 694:	91 e0       	ldi	r25, 0x01	; 1
 696:	0e 94 75 04 	call	0x8ea	; 0x8ea <_ZN14HardwareSerial5beginEmh>
void setup() {
	// start serial connection
	Serial.begin(9600);
  
	// Configure input en pull up
	pinMode(PYRO_SUBD_7, INPUT_PULLUP);
 69a:	62 e0       	ldi	r22, 0x02	; 2
 69c:	84 e0       	ldi	r24, 0x04	; 4
 69e:	0e 94 88 06 	call	0xd10	; 0xd10 <pinMode>
  
	// Configure interruption
	enableInterrupt(PYRO_SUBD_7, SUBD_7_CHANGE, CHANGE);
 6a2:	41 e0       	ldi	r20, 0x01	; 1
 6a4:	66 e9       	ldi	r22, 0x96	; 150
 6a6:	70 e0       	ldi	r23, 0x00	; 0
 6a8:	84 e0       	ldi	r24, 0x04	; 4
 6aa:	0c 94 ef 00 	jmp	0x1de	; 0x1de <_Z15enableInterrupthPFvvEh>

000006ae <loop>:
}

void loop() {
	
	if (MemoCurrentMode != CurrentMode)
 6ae:	90 91 46 01 	lds	r25, 0x0146	; 0x800146 <__data_end>
 6b2:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <CurrentMode>
 6b6:	98 17       	cp	r25, r24
 6b8:	39 f1       	breq	.+78     	; 0x708 <loop+0x5a>
	{
		MemoCurrentMode = CurrentMode;
 6ba:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <CurrentMode>
 6be:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <__data_end>
		
		//print out the value of the pushbutton
		Serial.println("Fire Mode:");
 6c2:	60 e0       	ldi	r22, 0x00	; 0
 6c4:	71 e0       	ldi	r23, 0x01	; 1
 6c6:	81 e9       	ldi	r24, 0x91	; 145
 6c8:	91 e0       	ldi	r25, 0x01	; 1
 6ca:	0e 94 bc 05 	call	0xb78	; 0xb78 <_ZN5Print7printlnEPKc>
		switch (CurrentMode)
 6ce:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <CurrentMode>
 6d2:	82 30       	cpi	r24, 0x02	; 2
 6d4:	69 f0       	breq	.+26     	; 0x6f0 <loop+0x42>
 6d6:	28 f4       	brcc	.+10     	; 0x6e2 <loop+0x34>
 6d8:	81 30       	cpi	r24, 0x01	; 1
 6da:	81 f4       	brne	.+32     	; 0x6fc <loop+0x4e>
		{
			case Fire_Armed:		Serial.println("Armed");	break;
 6dc:	6b e0       	ldi	r22, 0x0B	; 11
 6de:	71 e0       	ldi	r23, 0x01	; 1
 6e0:	0f c0       	rjmp	.+30     	; 0x700 <loop+0x52>
	{
		MemoCurrentMode = CurrentMode;
		
		//print out the value of the pushbutton
		Serial.println("Fire Mode:");
		switch (CurrentMode)
 6e2:	83 30       	cpi	r24, 0x03	; 3
 6e4:	41 f0       	breq	.+16     	; 0x6f6 <loop+0x48>
 6e6:	84 30       	cpi	r24, 0x04	; 4
 6e8:	49 f4       	brne	.+18     	; 0x6fc <loop+0x4e>
		{
			case Fire_Armed:		Serial.println("Armed");	break;
			case Fire_Go:			Serial.println("Go");		break;
			case Fire_Stop:			Serial.println("Stop");		break;
			case Fire_End:			Serial.println("End");		break;
 6ea:	69 e1       	ldi	r22, 0x19	; 25
 6ec:	71 e0       	ldi	r23, 0x01	; 1
 6ee:	08 c0       	rjmp	.+16     	; 0x700 <loop+0x52>
		//print out the value of the pushbutton
		Serial.println("Fire Mode:");
		switch (CurrentMode)
		{
			case Fire_Armed:		Serial.println("Armed");	break;
			case Fire_Go:			Serial.println("Go");		break;
 6f0:	61 e1       	ldi	r22, 0x11	; 17
 6f2:	71 e0       	ldi	r23, 0x01	; 1
 6f4:	05 c0       	rjmp	.+10     	; 0x700 <loop+0x52>
			case Fire_Stop:			Serial.println("Stop");		break;
 6f6:	64 e1       	ldi	r22, 0x14	; 20
 6f8:	71 e0       	ldi	r23, 0x01	; 1
 6fa:	02 c0       	rjmp	.+4      	; 0x700 <loop+0x52>
			case Fire_End:			Serial.println("End");		break;
			case Fire_Undefined: 
			default:				Serial.println("Unknown");	break;
 6fc:	6d e1       	ldi	r22, 0x1D	; 29
 6fe:	71 e0       	ldi	r23, 0x01	; 1
 700:	81 e9       	ldi	r24, 0x91	; 145
 702:	91 e0       	ldi	r25, 0x01	; 1
 704:	0e 94 bc 05 	call	0xb78	; 0xb78 <_ZN5Print7printlnEPKc>
			
		}
	}
	
	if ((ms - refresh) > TIME_OUT_FB)	{	CurrentMode = Fire_Undefined;	}
 708:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <ms>
 70c:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <ms+0x1>
 710:	a0 91 4a 01 	lds	r26, 0x014A	; 0x80014a <ms+0x2>
 714:	b0 91 4b 01 	lds	r27, 0x014B	; 0x80014b <ms+0x3>
 718:	40 91 4c 01 	lds	r20, 0x014C	; 0x80014c <refresh>
 71c:	50 91 4d 01 	lds	r21, 0x014D	; 0x80014d <refresh+0x1>
 720:	60 91 4e 01 	lds	r22, 0x014E	; 0x80014e <refresh+0x2>
 724:	70 91 4f 01 	lds	r23, 0x014F	; 0x80014f <refresh+0x3>
 728:	84 1b       	sub	r24, r20
 72a:	95 0b       	sbc	r25, r21
 72c:	a6 0b       	sbc	r26, r22
 72e:	b7 0b       	sbc	r27, r23
 730:	89 3e       	cpi	r24, 0xE9	; 233
 732:	93 40       	sbci	r25, 0x03	; 3
 734:	a1 05       	cpc	r26, r1
 736:	b1 05       	cpc	r27, r1
 738:	10 f0       	brcs	.+4      	; 0x73e <loop+0x90>
 73a:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <CurrentMode>
 73e:	08 95       	ret

00000740 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
 740:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
 742:	91 8d       	ldd	r25, Z+25	; 0x19
 744:	22 8d       	ldd	r18, Z+26	; 0x1a
 746:	89 2f       	mov	r24, r25
 748:	90 e0       	ldi	r25, 0x00	; 0
 74a:	80 5c       	subi	r24, 0xC0	; 192
 74c:	9f 4f       	sbci	r25, 0xFF	; 255
 74e:	82 1b       	sub	r24, r18
 750:	91 09       	sbc	r25, r1
}
 752:	8f 73       	andi	r24, 0x3F	; 63
 754:	99 27       	eor	r25, r25
 756:	08 95       	ret

00000758 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
 758:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
 75a:	91 8d       	ldd	r25, Z+25	; 0x19
 75c:	82 8d       	ldd	r24, Z+26	; 0x1a
 75e:	98 17       	cp	r25, r24
 760:	31 f0       	breq	.+12     	; 0x76e <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
 762:	82 8d       	ldd	r24, Z+26	; 0x1a
 764:	e8 0f       	add	r30, r24
 766:	f1 1d       	adc	r31, r1
 768:	85 8d       	ldd	r24, Z+29	; 0x1d
 76a:	90 e0       	ldi	r25, 0x00	; 0
 76c:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 76e:	8f ef       	ldi	r24, 0xFF	; 255
 770:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
 772:	08 95       	ret

00000774 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
 774:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
 776:	91 8d       	ldd	r25, Z+25	; 0x19
 778:	82 8d       	ldd	r24, Z+26	; 0x1a
 77a:	98 17       	cp	r25, r24
 77c:	61 f0       	breq	.+24     	; 0x796 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
 77e:	82 8d       	ldd	r24, Z+26	; 0x1a
 780:	df 01       	movw	r26, r30
 782:	a8 0f       	add	r26, r24
 784:	b1 1d       	adc	r27, r1
 786:	5d 96       	adiw	r26, 0x1d	; 29
 788:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
 78a:	92 8d       	ldd	r25, Z+26	; 0x1a
 78c:	9f 5f       	subi	r25, 0xFF	; 255
 78e:	9f 73       	andi	r25, 0x3F	; 63
 790:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
 792:	90 e0       	ldi	r25, 0x00	; 0
 794:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 796:	8f ef       	ldi	r24, 0xFF	; 255
 798:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
 79a:	08 95       	ret

0000079c <_ZN14HardwareSerial17availableForWriteEv>:
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
 79c:	fc 01       	movw	r30, r24
 79e:	53 8d       	ldd	r21, Z+27	; 0x1b
  tx_buffer_index_t tail = _tx_buffer_tail;
 7a0:	44 8d       	ldd	r20, Z+28	; 0x1c
 7a2:	25 2f       	mov	r18, r21
 7a4:	30 e0       	ldi	r19, 0x00	; 0
 7a6:	84 2f       	mov	r24, r20
 7a8:	90 e0       	ldi	r25, 0x00	; 0
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
 7aa:	82 1b       	sub	r24, r18
 7ac:	93 0b       	sbc	r25, r19
 7ae:	54 17       	cp	r21, r20
 7b0:	10 f0       	brcs	.+4      	; 0x7b6 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
 7b2:	cf 96       	adiw	r24, 0x3f	; 63
 7b4:	08 95       	ret
  return tail - head - 1;
 7b6:	01 97       	sbiw	r24, 0x01	; 1
}
 7b8:	08 95       	ret

000007ba <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
 7ba:	82 e3       	ldi	r24, 0x32	; 50
 7bc:	95 e0       	ldi	r25, 0x05	; 5
 7be:	89 2b       	or	r24, r25
 7c0:	49 f0       	breq	.+18     	; 0x7d4 <_Z14serialEventRunv+0x1a>
 7c2:	80 e0       	ldi	r24, 0x00	; 0
 7c4:	90 e0       	ldi	r25, 0x00	; 0
 7c6:	89 2b       	or	r24, r25
 7c8:	29 f0       	breq	.+10     	; 0x7d4 <_Z14serialEventRunv+0x1a>
 7ca:	0e 94 32 05 	call	0xa64	; 0xa64 <_Z17Serial0_availablev>
 7ce:	81 11       	cpse	r24, r1
 7d0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
 7d4:	08 95       	ret

000007d6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
 7d6:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
 7d8:	84 8d       	ldd	r24, Z+28	; 0x1c
 7da:	df 01       	movw	r26, r30
 7dc:	a8 0f       	add	r26, r24
 7de:	b1 1d       	adc	r27, r1
 7e0:	a3 5a       	subi	r26, 0xA3	; 163
 7e2:	bf 4f       	sbci	r27, 0xFF	; 255
 7e4:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
 7e6:	84 8d       	ldd	r24, Z+28	; 0x1c
 7e8:	90 e0       	ldi	r25, 0x00	; 0
 7ea:	01 96       	adiw	r24, 0x01	; 1
 7ec:	8f 73       	andi	r24, 0x3F	; 63
 7ee:	99 27       	eor	r25, r25
 7f0:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
 7f2:	a6 89       	ldd	r26, Z+22	; 0x16
 7f4:	b7 89       	ldd	r27, Z+23	; 0x17
 7f6:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
 7f8:	a0 89       	ldd	r26, Z+16	; 0x10
 7fa:	b1 89       	ldd	r27, Z+17	; 0x11
 7fc:	8c 91       	ld	r24, X
 7fe:	80 64       	ori	r24, 0x40	; 64
 800:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
 802:	93 8d       	ldd	r25, Z+27	; 0x1b
 804:	84 8d       	ldd	r24, Z+28	; 0x1c
 806:	98 13       	cpse	r25, r24
 808:	06 c0       	rjmp	.+12     	; 0x816 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
 80a:	02 88       	ldd	r0, Z+18	; 0x12
 80c:	f3 89       	ldd	r31, Z+19	; 0x13
 80e:	e0 2d       	mov	r30, r0
 810:	80 81       	ld	r24, Z
 812:	8f 7d       	andi	r24, 0xDF	; 223
 814:	80 83       	st	Z, r24
 816:	08 95       	ret

00000818 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
 818:	ef 92       	push	r14
 81a:	ff 92       	push	r15
 81c:	0f 93       	push	r16
 81e:	1f 93       	push	r17
 820:	cf 93       	push	r28
 822:	df 93       	push	r29
 824:	ec 01       	movw	r28, r24
  _written = true;
 826:	81 e0       	ldi	r24, 0x01	; 1
 828:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
 82a:	9b 8d       	ldd	r25, Y+27	; 0x1b
 82c:	8c 8d       	ldd	r24, Y+28	; 0x1c
 82e:	98 13       	cpse	r25, r24
 830:	05 c0       	rjmp	.+10     	; 0x83c <_ZN14HardwareSerial5writeEh+0x24>
 832:	e8 89       	ldd	r30, Y+16	; 0x10
 834:	f9 89       	ldd	r31, Y+17	; 0x11
 836:	80 81       	ld	r24, Z
 838:	85 fd       	sbrc	r24, 5
 83a:	24 c0       	rjmp	.+72     	; 0x884 <_ZN14HardwareSerial5writeEh+0x6c>
 83c:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
 83e:	0b 8d       	ldd	r16, Y+27	; 0x1b
 840:	10 e0       	ldi	r17, 0x00	; 0
 842:	0f 5f       	subi	r16, 0xFF	; 255
 844:	1f 4f       	sbci	r17, 0xFF	; 255
 846:	0f 73       	andi	r16, 0x3F	; 63
 848:	11 27       	eor	r17, r17
 84a:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
 84c:	8c 8d       	ldd	r24, Y+28	; 0x1c
 84e:	e8 12       	cpse	r14, r24
 850:	0c c0       	rjmp	.+24     	; 0x86a <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
 852:	0f b6       	in	r0, 0x3f	; 63
 854:	07 fc       	sbrc	r0, 7
 856:	fa cf       	rjmp	.-12     	; 0x84c <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
 858:	e8 89       	ldd	r30, Y+16	; 0x10
 85a:	f9 89       	ldd	r31, Y+17	; 0x11
 85c:	80 81       	ld	r24, Z
 85e:	85 ff       	sbrs	r24, 5
 860:	f5 cf       	rjmp	.-22     	; 0x84c <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
 862:	ce 01       	movw	r24, r28
 864:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 868:	f1 cf       	rjmp	.-30     	; 0x84c <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
 86a:	8b 8d       	ldd	r24, Y+27	; 0x1b
 86c:	fe 01       	movw	r30, r28
 86e:	e8 0f       	add	r30, r24
 870:	f1 1d       	adc	r31, r1
 872:	e3 5a       	subi	r30, 0xA3	; 163
 874:	ff 4f       	sbci	r31, 0xFF	; 255
 876:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
 878:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
 87a:	ea 89       	ldd	r30, Y+18	; 0x12
 87c:	fb 89       	ldd	r31, Y+19	; 0x13
 87e:	80 81       	ld	r24, Z
 880:	80 62       	ori	r24, 0x20	; 32
 882:	07 c0       	rjmp	.+14     	; 0x892 <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
 884:	ee 89       	ldd	r30, Y+22	; 0x16
 886:	ff 89       	ldd	r31, Y+23	; 0x17
 888:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
 88a:	e8 89       	ldd	r30, Y+16	; 0x10
 88c:	f9 89       	ldd	r31, Y+17	; 0x11
 88e:	80 81       	ld	r24, Z
 890:	80 64       	ori	r24, 0x40	; 64
 892:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
 894:	81 e0       	ldi	r24, 0x01	; 1
 896:	90 e0       	ldi	r25, 0x00	; 0
 898:	df 91       	pop	r29
 89a:	cf 91       	pop	r28
 89c:	1f 91       	pop	r17
 89e:	0f 91       	pop	r16
 8a0:	ff 90       	pop	r15
 8a2:	ef 90       	pop	r14
 8a4:	08 95       	ret

000008a6 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
 8a6:	cf 93       	push	r28
 8a8:	df 93       	push	r29
 8aa:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
 8ac:	88 8d       	ldd	r24, Y+24	; 0x18
 8ae:	88 23       	and	r24, r24
 8b0:	c9 f0       	breq	.+50     	; 0x8e4 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
 8b2:	ea 89       	ldd	r30, Y+18	; 0x12
 8b4:	fb 89       	ldd	r31, Y+19	; 0x13
 8b6:	80 81       	ld	r24, Z
 8b8:	85 fd       	sbrc	r24, 5
 8ba:	05 c0       	rjmp	.+10     	; 0x8c6 <_ZN14HardwareSerial5flushEv+0x20>
 8bc:	a8 89       	ldd	r26, Y+16	; 0x10
 8be:	b9 89       	ldd	r27, Y+17	; 0x11
 8c0:	8c 91       	ld	r24, X
 8c2:	86 fd       	sbrc	r24, 6
 8c4:	0f c0       	rjmp	.+30     	; 0x8e4 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
 8c6:	0f b6       	in	r0, 0x3f	; 63
 8c8:	07 fc       	sbrc	r0, 7
 8ca:	f5 cf       	rjmp	.-22     	; 0x8b6 <_ZN14HardwareSerial5flushEv+0x10>
 8cc:	80 81       	ld	r24, Z
 8ce:	85 ff       	sbrs	r24, 5
 8d0:	f2 cf       	rjmp	.-28     	; 0x8b6 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
 8d2:	a8 89       	ldd	r26, Y+16	; 0x10
 8d4:	b9 89       	ldd	r27, Y+17	; 0x11
 8d6:	8c 91       	ld	r24, X
 8d8:	85 ff       	sbrs	r24, 5
 8da:	ed cf       	rjmp	.-38     	; 0x8b6 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
 8dc:	ce 01       	movw	r24, r28
 8de:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 8e2:	e7 cf       	rjmp	.-50     	; 0x8b2 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
 8e4:	df 91       	pop	r29
 8e6:	cf 91       	pop	r28
 8e8:	08 95       	ret

000008ea <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
 8ea:	cf 92       	push	r12
 8ec:	df 92       	push	r13
 8ee:	ef 92       	push	r14
 8f0:	ff 92       	push	r15
 8f2:	1f 93       	push	r17
 8f4:	cf 93       	push	r28
 8f6:	df 93       	push	r29
 8f8:	ec 01       	movw	r28, r24
 8fa:	6a 01       	movw	r12, r20
 8fc:	7b 01       	movw	r14, r22
 8fe:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
 900:	e8 89       	ldd	r30, Y+16	; 0x10
 902:	f9 89       	ldd	r31, Y+17	; 0x11
 904:	82 e0       	ldi	r24, 0x02	; 2
 906:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 908:	41 15       	cp	r20, r1
 90a:	51 4e       	sbci	r21, 0xE1	; 225
 90c:	61 05       	cpc	r22, r1
 90e:	71 05       	cpc	r23, r1
 910:	b1 f0       	breq	.+44     	; 0x93e <__stack+0x3f>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
 912:	60 e0       	ldi	r22, 0x00	; 0
 914:	79 e0       	ldi	r23, 0x09	; 9
 916:	8d e3       	ldi	r24, 0x3D	; 61
 918:	90 e0       	ldi	r25, 0x00	; 0
 91a:	a7 01       	movw	r20, r14
 91c:	96 01       	movw	r18, r12
 91e:	0e 94 ed 06 	call	0xdda	; 0xdda <__udivmodsi4>
 922:	da 01       	movw	r26, r20
 924:	c9 01       	movw	r24, r18
 926:	01 97       	sbiw	r24, 0x01	; 1
 928:	a1 09       	sbc	r26, r1
 92a:	b1 09       	sbc	r27, r1
 92c:	b6 95       	lsr	r27
 92e:	a7 95       	ror	r26
 930:	97 95       	ror	r25
 932:	87 95       	ror	r24
 934:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 936:	21 15       	cp	r18, r1
 938:	80 e1       	ldi	r24, 0x10	; 16
 93a:	38 07       	cpc	r19, r24
 93c:	a8 f0       	brcs	.+42     	; 0x968 <__stack+0x69>
  {
    *_ucsra = 0;
 93e:	e8 89       	ldd	r30, Y+16	; 0x10
 940:	f9 89       	ldd	r31, Y+17	; 0x11
 942:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
 944:	60 e8       	ldi	r22, 0x80	; 128
 946:	74 e8       	ldi	r23, 0x84	; 132
 948:	8e e1       	ldi	r24, 0x1E	; 30
 94a:	90 e0       	ldi	r25, 0x00	; 0
 94c:	a7 01       	movw	r20, r14
 94e:	96 01       	movw	r18, r12
 950:	0e 94 ed 06 	call	0xdda	; 0xdda <__udivmodsi4>
 954:	da 01       	movw	r26, r20
 956:	c9 01       	movw	r24, r18
 958:	01 97       	sbiw	r24, 0x01	; 1
 95a:	a1 09       	sbc	r26, r1
 95c:	b1 09       	sbc	r27, r1
 95e:	b6 95       	lsr	r27
 960:	a7 95       	ror	r26
 962:	97 95       	ror	r25
 964:	87 95       	ror	r24
 966:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
 968:	ec 85       	ldd	r30, Y+12	; 0x0c
 96a:	fd 85       	ldd	r31, Y+13	; 0x0d
 96c:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
 96e:	ee 85       	ldd	r30, Y+14	; 0x0e
 970:	ff 85       	ldd	r31, Y+15	; 0x0f
 972:	20 83       	st	Z, r18

  _written = false;
 974:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
 976:	ec 89       	ldd	r30, Y+20	; 0x14
 978:	fd 89       	ldd	r31, Y+21	; 0x15
 97a:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
 97c:	ea 89       	ldd	r30, Y+18	; 0x12
 97e:	fb 89       	ldd	r31, Y+19	; 0x13
 980:	80 81       	ld	r24, Z
 982:	80 61       	ori	r24, 0x10	; 16
 984:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
 986:	ea 89       	ldd	r30, Y+18	; 0x12
 988:	fb 89       	ldd	r31, Y+19	; 0x13
 98a:	80 81       	ld	r24, Z
 98c:	88 60       	ori	r24, 0x08	; 8
 98e:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
 990:	ea 89       	ldd	r30, Y+18	; 0x12
 992:	fb 89       	ldd	r31, Y+19	; 0x13
 994:	80 81       	ld	r24, Z
 996:	80 68       	ori	r24, 0x80	; 128
 998:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
 99a:	ea 89       	ldd	r30, Y+18	; 0x12
 99c:	fb 89       	ldd	r31, Y+19	; 0x13
 99e:	80 81       	ld	r24, Z
 9a0:	8f 7d       	andi	r24, 0xDF	; 223
 9a2:	80 83       	st	Z, r24
}
 9a4:	df 91       	pop	r29
 9a6:	cf 91       	pop	r28
 9a8:	1f 91       	pop	r17
 9aa:	ff 90       	pop	r15
 9ac:	ef 90       	pop	r14
 9ae:	df 90       	pop	r13
 9b0:	cf 90       	pop	r12
 9b2:	08 95       	ret

000009b4 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
 9b4:	1f 92       	push	r1
 9b6:	0f 92       	push	r0
 9b8:	0f b6       	in	r0, 0x3f	; 63
 9ba:	0f 92       	push	r0
 9bc:	11 24       	eor	r1, r1
 9be:	2f 93       	push	r18
 9c0:	8f 93       	push	r24
 9c2:	9f 93       	push	r25
 9c4:	ef 93       	push	r30
 9c6:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
 9c8:	e0 91 a1 01 	lds	r30, 0x01A1	; 0x8001a1 <Serial+0x10>
 9cc:	f0 91 a2 01 	lds	r31, 0x01A2	; 0x8001a2 <Serial+0x11>
 9d0:	80 81       	ld	r24, Z
 9d2:	e0 91 a7 01 	lds	r30, 0x01A7	; 0x8001a7 <Serial+0x16>
 9d6:	f0 91 a8 01 	lds	r31, 0x01A8	; 0x8001a8 <Serial+0x17>
 9da:	82 fd       	sbrc	r24, 2
 9dc:	12 c0       	rjmp	.+36     	; 0xa02 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
 9de:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
 9e0:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <Serial+0x19>
 9e4:	8f 5f       	subi	r24, 0xFF	; 255
 9e6:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
 9e8:	20 91 ab 01 	lds	r18, 0x01AB	; 0x8001ab <Serial+0x1a>
 9ec:	82 17       	cp	r24, r18
 9ee:	51 f0       	breq	.+20     	; 0xa04 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
 9f0:	e0 91 aa 01 	lds	r30, 0x01AA	; 0x8001aa <Serial+0x19>
 9f4:	f0 e0       	ldi	r31, 0x00	; 0
 9f6:	ef 56       	subi	r30, 0x6F	; 111
 9f8:	fe 4f       	sbci	r31, 0xFE	; 254
 9fa:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
 9fc:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <Serial+0x19>
 a00:	01 c0       	rjmp	.+2      	; 0xa04 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
 a02:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
 a04:	ff 91       	pop	r31
 a06:	ef 91       	pop	r30
 a08:	9f 91       	pop	r25
 a0a:	8f 91       	pop	r24
 a0c:	2f 91       	pop	r18
 a0e:	0f 90       	pop	r0
 a10:	0f be       	out	0x3f, r0	; 63
 a12:	0f 90       	pop	r0
 a14:	1f 90       	pop	r1
 a16:	18 95       	reti

00000a18 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
 a18:	1f 92       	push	r1
 a1a:	0f 92       	push	r0
 a1c:	0f b6       	in	r0, 0x3f	; 63
 a1e:	0f 92       	push	r0
 a20:	11 24       	eor	r1, r1
 a22:	2f 93       	push	r18
 a24:	3f 93       	push	r19
 a26:	4f 93       	push	r20
 a28:	5f 93       	push	r21
 a2a:	6f 93       	push	r22
 a2c:	7f 93       	push	r23
 a2e:	8f 93       	push	r24
 a30:	9f 93       	push	r25
 a32:	af 93       	push	r26
 a34:	bf 93       	push	r27
 a36:	ef 93       	push	r30
 a38:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
 a3a:	81 e9       	ldi	r24, 0x91	; 145
 a3c:	91 e0       	ldi	r25, 0x01	; 1
 a3e:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
 a42:	ff 91       	pop	r31
 a44:	ef 91       	pop	r30
 a46:	bf 91       	pop	r27
 a48:	af 91       	pop	r26
 a4a:	9f 91       	pop	r25
 a4c:	8f 91       	pop	r24
 a4e:	7f 91       	pop	r23
 a50:	6f 91       	pop	r22
 a52:	5f 91       	pop	r21
 a54:	4f 91       	pop	r20
 a56:	3f 91       	pop	r19
 a58:	2f 91       	pop	r18
 a5a:	0f 90       	pop	r0
 a5c:	0f be       	out	0x3f, r0	; 63
 a5e:	0f 90       	pop	r0
 a60:	1f 90       	pop	r1
 a62:	18 95       	reti

00000a64 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
 a64:	81 e9       	ldi	r24, 0x91	; 145
 a66:	91 e0       	ldi	r25, 0x01	; 1
 a68:	0e 94 a0 03 	call	0x740	; 0x740 <_ZN14HardwareSerial9availableEv>
 a6c:	21 e0       	ldi	r18, 0x01	; 1
 a6e:	89 2b       	or	r24, r25
 a70:	09 f4       	brne	.+2      	; 0xa74 <_Z17Serial0_availablev+0x10>
 a72:	20 e0       	ldi	r18, 0x00	; 0
}
 a74:	82 2f       	mov	r24, r18
 a76:	08 95       	ret

00000a78 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 a78:	e1 e9       	ldi	r30, 0x91	; 145
 a7a:	f1 e0       	ldi	r31, 0x01	; 1
 a7c:	13 82       	std	Z+3, r1	; 0x03
 a7e:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
 a80:	88 ee       	ldi	r24, 0xE8	; 232
 a82:	93 e0       	ldi	r25, 0x03	; 3
 a84:	a0 e0       	ldi	r26, 0x00	; 0
 a86:	b0 e0       	ldi	r27, 0x00	; 0
 a88:	84 83       	std	Z+4, r24	; 0x04
 a8a:	95 83       	std	Z+5, r25	; 0x05
 a8c:	a6 83       	std	Z+6, r26	; 0x06
 a8e:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
 a90:	89 e2       	ldi	r24, 0x29	; 41
 a92:	91 e0       	ldi	r25, 0x01	; 1
 a94:	91 83       	std	Z+1, r25	; 0x01
 a96:	80 83       	st	Z, r24
 a98:	85 ec       	ldi	r24, 0xC5	; 197
 a9a:	90 e0       	ldi	r25, 0x00	; 0
 a9c:	95 87       	std	Z+13, r25	; 0x0d
 a9e:	84 87       	std	Z+12, r24	; 0x0c
 aa0:	84 ec       	ldi	r24, 0xC4	; 196
 aa2:	90 e0       	ldi	r25, 0x00	; 0
 aa4:	97 87       	std	Z+15, r25	; 0x0f
 aa6:	86 87       	std	Z+14, r24	; 0x0e
 aa8:	80 ec       	ldi	r24, 0xC0	; 192
 aaa:	90 e0       	ldi	r25, 0x00	; 0
 aac:	91 8b       	std	Z+17, r25	; 0x11
 aae:	80 8b       	std	Z+16, r24	; 0x10
 ab0:	81 ec       	ldi	r24, 0xC1	; 193
 ab2:	90 e0       	ldi	r25, 0x00	; 0
 ab4:	93 8b       	std	Z+19, r25	; 0x13
 ab6:	82 8b       	std	Z+18, r24	; 0x12
 ab8:	82 ec       	ldi	r24, 0xC2	; 194
 aba:	90 e0       	ldi	r25, 0x00	; 0
 abc:	95 8b       	std	Z+21, r25	; 0x15
 abe:	84 8b       	std	Z+20, r24	; 0x14
 ac0:	86 ec       	ldi	r24, 0xC6	; 198
 ac2:	90 e0       	ldi	r25, 0x00	; 0
 ac4:	97 8b       	std	Z+23, r25	; 0x17
 ac6:	86 8b       	std	Z+22, r24	; 0x16
 ac8:	11 8e       	std	Z+25, r1	; 0x19
 aca:	12 8e       	std	Z+26, r1	; 0x1a
 acc:	13 8e       	std	Z+27, r1	; 0x1b
 ace:	14 8e       	std	Z+28, r1	; 0x1c
 ad0:	08 95       	ret

00000ad2 <initVariant>:
 ad2:	08 95       	ret

00000ad4 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
 ad4:	0e 94 24 06 	call	0xc48	; 0xc48 <init>

	initVariant();
 ad8:	0e 94 69 05 	call	0xad2	; 0xad2 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 adc:	0e 94 44 03 	call	0x688	; 0x688 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 ae0:	cd ed       	ldi	r28, 0xDD	; 221
 ae2:	d3 e0       	ldi	r29, 0x03	; 3
#endif
	
	setup();
    
	for (;;) {
		loop();
 ae4:	0e 94 57 03 	call	0x6ae	; 0x6ae <loop>
		if (serialEventRun) serialEventRun();
 ae8:	20 97       	sbiw	r28, 0x00	; 0
 aea:	e1 f3       	breq	.-8      	; 0xae4 <main+0x10>
 aec:	0e 94 dd 03 	call	0x7ba	; 0x7ba <_Z14serialEventRunv>
 af0:	f9 cf       	rjmp	.-14     	; 0xae4 <main+0x10>

00000af2 <_ZN5Print5writeEPKhj>:
size_t Print::println(const String &s)
{
  size_t n = print(s);
  n += println();
  return n;
}
 af2:	cf 92       	push	r12
 af4:	df 92       	push	r13
 af6:	ef 92       	push	r14
 af8:	ff 92       	push	r15
 afa:	0f 93       	push	r16
 afc:	1f 93       	push	r17
 afe:	cf 93       	push	r28
 b00:	df 93       	push	r29
 b02:	6c 01       	movw	r12, r24
 b04:	7a 01       	movw	r14, r20
 b06:	8b 01       	movw	r16, r22
 b08:	c0 e0       	ldi	r28, 0x00	; 0
 b0a:	d0 e0       	ldi	r29, 0x00	; 0
 b0c:	ce 15       	cp	r28, r14
 b0e:	df 05       	cpc	r29, r15
 b10:	81 f0       	breq	.+32     	; 0xb32 <_ZN5Print5writeEPKhj+0x40>
 b12:	d8 01       	movw	r26, r16
 b14:	6d 91       	ld	r22, X+
 b16:	8d 01       	movw	r16, r26
 b18:	d6 01       	movw	r26, r12
 b1a:	ed 91       	ld	r30, X+
 b1c:	fc 91       	ld	r31, X
 b1e:	01 90       	ld	r0, Z+
 b20:	f0 81       	ld	r31, Z
 b22:	e0 2d       	mov	r30, r0
 b24:	c6 01       	movw	r24, r12
 b26:	09 95       	icall
 b28:	89 2b       	or	r24, r25
 b2a:	11 f0       	breq	.+4      	; 0xb30 <_ZN5Print5writeEPKhj+0x3e>
 b2c:	21 96       	adiw	r28, 0x01	; 1
 b2e:	ee cf       	rjmp	.-36     	; 0xb0c <_ZN5Print5writeEPKhj+0x1a>
 b30:	7e 01       	movw	r14, r28
 b32:	c7 01       	movw	r24, r14
 b34:	df 91       	pop	r29
 b36:	cf 91       	pop	r28
 b38:	1f 91       	pop	r17
 b3a:	0f 91       	pop	r16
 b3c:	ff 90       	pop	r15
 b3e:	ef 90       	pop	r14
 b40:	df 90       	pop	r13
 b42:	cf 90       	pop	r12
 b44:	08 95       	ret

00000b46 <_ZN5Print5writeEPKc>:
 b46:	61 15       	cp	r22, r1
 b48:	71 05       	cpc	r23, r1
 b4a:	79 f0       	breq	.+30     	; 0xb6a <_ZN5Print5writeEPKc+0x24>
 b4c:	fb 01       	movw	r30, r22
 b4e:	01 90       	ld	r0, Z+
 b50:	00 20       	and	r0, r0
 b52:	e9 f7       	brne	.-6      	; 0xb4e <_ZN5Print5writeEPKc+0x8>
 b54:	31 97       	sbiw	r30, 0x01	; 1
 b56:	af 01       	movw	r20, r30
 b58:	46 1b       	sub	r20, r22
 b5a:	57 0b       	sbc	r21, r23
 b5c:	dc 01       	movw	r26, r24
 b5e:	ed 91       	ld	r30, X+
 b60:	fc 91       	ld	r31, X
 b62:	02 80       	ldd	r0, Z+2	; 0x02
 b64:	f3 81       	ldd	r31, Z+3	; 0x03
 b66:	e0 2d       	mov	r30, r0
 b68:	09 94       	ijmp
 b6a:	80 e0       	ldi	r24, 0x00	; 0
 b6c:	90 e0       	ldi	r25, 0x00	; 0
 b6e:	08 95       	ret

00000b70 <_ZN5Print7printlnEv>:
 b70:	67 e3       	ldi	r22, 0x37	; 55
 b72:	71 e0       	ldi	r23, 0x01	; 1
 b74:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <_ZN5Print5writeEPKc>

00000b78 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 b78:	0f 93       	push	r16
 b7a:	1f 93       	push	r17
 b7c:	cf 93       	push	r28
 b7e:	df 93       	push	r29
 b80:	ec 01       	movw	r28, r24
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
 b82:	0e 94 a3 05 	call	0xb46	; 0xb46 <_ZN5Print5writeEPKc>
 b86:	8c 01       	movw	r16, r24
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 b88:	ce 01       	movw	r24, r28
 b8a:	0e 94 b8 05 	call	0xb70	; 0xb70 <_ZN5Print7printlnEv>
  return n;
}
 b8e:	80 0f       	add	r24, r16
 b90:	91 1f       	adc	r25, r17
 b92:	df 91       	pop	r29
 b94:	cf 91       	pop	r28
 b96:	1f 91       	pop	r17
 b98:	0f 91       	pop	r16
 b9a:	08 95       	ret

00000b9c <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
 b9c:	1f 92       	push	r1
 b9e:	0f 92       	push	r0
 ba0:	0f b6       	in	r0, 0x3f	; 63
 ba2:	0f 92       	push	r0
 ba4:	11 24       	eor	r1, r1
 ba6:	2f 93       	push	r18
 ba8:	3f 93       	push	r19
 baa:	8f 93       	push	r24
 bac:	9f 93       	push	r25
 bae:	af 93       	push	r26
 bb0:	bf 93       	push	r27
 bb2:	80 91 2f 02 	lds	r24, 0x022F	; 0x80022f <timer0_millis>
 bb6:	90 91 30 02 	lds	r25, 0x0230	; 0x800230 <timer0_millis+0x1>
 bba:	a0 91 31 02 	lds	r26, 0x0231	; 0x800231 <timer0_millis+0x2>
 bbe:	b0 91 32 02 	lds	r27, 0x0232	; 0x800232 <timer0_millis+0x3>
 bc2:	30 91 2e 02 	lds	r19, 0x022E	; 0x80022e <timer0_fract>
 bc6:	23 e0       	ldi	r18, 0x03	; 3
 bc8:	23 0f       	add	r18, r19
 bca:	2d 37       	cpi	r18, 0x7D	; 125
 bcc:	20 f4       	brcc	.+8      	; 0xbd6 <__vector_16+0x3a>
 bce:	01 96       	adiw	r24, 0x01	; 1
 bd0:	a1 1d       	adc	r26, r1
 bd2:	b1 1d       	adc	r27, r1
 bd4:	05 c0       	rjmp	.+10     	; 0xbe0 <__vector_16+0x44>
 bd6:	26 e8       	ldi	r18, 0x86	; 134
 bd8:	23 0f       	add	r18, r19
 bda:	02 96       	adiw	r24, 0x02	; 2
 bdc:	a1 1d       	adc	r26, r1
 bde:	b1 1d       	adc	r27, r1
 be0:	20 93 2e 02 	sts	0x022E, r18	; 0x80022e <timer0_fract>
 be4:	80 93 2f 02 	sts	0x022F, r24	; 0x80022f <timer0_millis>
 be8:	90 93 30 02 	sts	0x0230, r25	; 0x800230 <timer0_millis+0x1>
 bec:	a0 93 31 02 	sts	0x0231, r26	; 0x800231 <timer0_millis+0x2>
 bf0:	b0 93 32 02 	sts	0x0232, r27	; 0x800232 <timer0_millis+0x3>
 bf4:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <timer0_overflow_count>
 bf8:	90 91 34 02 	lds	r25, 0x0234	; 0x800234 <timer0_overflow_count+0x1>
 bfc:	a0 91 35 02 	lds	r26, 0x0235	; 0x800235 <timer0_overflow_count+0x2>
 c00:	b0 91 36 02 	lds	r27, 0x0236	; 0x800236 <timer0_overflow_count+0x3>
 c04:	01 96       	adiw	r24, 0x01	; 1
 c06:	a1 1d       	adc	r26, r1
 c08:	b1 1d       	adc	r27, r1
 c0a:	80 93 33 02 	sts	0x0233, r24	; 0x800233 <timer0_overflow_count>
 c0e:	90 93 34 02 	sts	0x0234, r25	; 0x800234 <timer0_overflow_count+0x1>
 c12:	a0 93 35 02 	sts	0x0235, r26	; 0x800235 <timer0_overflow_count+0x2>
 c16:	b0 93 36 02 	sts	0x0236, r27	; 0x800236 <timer0_overflow_count+0x3>
 c1a:	bf 91       	pop	r27
 c1c:	af 91       	pop	r26
 c1e:	9f 91       	pop	r25
 c20:	8f 91       	pop	r24
 c22:	3f 91       	pop	r19
 c24:	2f 91       	pop	r18
 c26:	0f 90       	pop	r0
 c28:	0f be       	out	0x3f, r0	; 63
 c2a:	0f 90       	pop	r0
 c2c:	1f 90       	pop	r1
 c2e:	18 95       	reti

00000c30 <millis>:
 c30:	2f b7       	in	r18, 0x3f	; 63
 c32:	f8 94       	cli
 c34:	60 91 2f 02 	lds	r22, 0x022F	; 0x80022f <timer0_millis>
 c38:	70 91 30 02 	lds	r23, 0x0230	; 0x800230 <timer0_millis+0x1>
 c3c:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <timer0_millis+0x2>
 c40:	90 91 32 02 	lds	r25, 0x0232	; 0x800232 <timer0_millis+0x3>
 c44:	2f bf       	out	0x3f, r18	; 63
 c46:	08 95       	ret

00000c48 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 c48:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 c4a:	84 b5       	in	r24, 0x24	; 36
 c4c:	82 60       	ori	r24, 0x02	; 2
 c4e:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 c50:	84 b5       	in	r24, 0x24	; 36
 c52:	81 60       	ori	r24, 0x01	; 1
 c54:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 c56:	85 b5       	in	r24, 0x25	; 37
 c58:	82 60       	ori	r24, 0x02	; 2
 c5a:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 c5c:	85 b5       	in	r24, 0x25	; 37
 c5e:	81 60       	ori	r24, 0x01	; 1
 c60:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 c62:	ee e6       	ldi	r30, 0x6E	; 110
 c64:	f0 e0       	ldi	r31, 0x00	; 0
 c66:	80 81       	ld	r24, Z
 c68:	81 60       	ori	r24, 0x01	; 1
 c6a:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 c6c:	e1 e8       	ldi	r30, 0x81	; 129
 c6e:	f0 e0       	ldi	r31, 0x00	; 0
 c70:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 c72:	80 81       	ld	r24, Z
 c74:	82 60       	ori	r24, 0x02	; 2
 c76:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 c78:	80 81       	ld	r24, Z
 c7a:	81 60       	ori	r24, 0x01	; 1
 c7c:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 c7e:	e0 e8       	ldi	r30, 0x80	; 128
 c80:	f0 e0       	ldi	r31, 0x00	; 0
 c82:	80 81       	ld	r24, Z
 c84:	81 60       	ori	r24, 0x01	; 1
 c86:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 c88:	e1 eb       	ldi	r30, 0xB1	; 177
 c8a:	f0 e0       	ldi	r31, 0x00	; 0
 c8c:	80 81       	ld	r24, Z
 c8e:	84 60       	ori	r24, 0x04	; 4
 c90:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 c92:	e0 eb       	ldi	r30, 0xB0	; 176
 c94:	f0 e0       	ldi	r31, 0x00	; 0
 c96:	80 81       	ld	r24, Z
 c98:	81 60       	ori	r24, 0x01	; 1
 c9a:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 c9c:	ea e7       	ldi	r30, 0x7A	; 122
 c9e:	f0 e0       	ldi	r31, 0x00	; 0
 ca0:	80 81       	ld	r24, Z
 ca2:	84 60       	ori	r24, 0x04	; 4
 ca4:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
 ca6:	80 81       	ld	r24, Z
 ca8:	82 60       	ori	r24, 0x02	; 2
 caa:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
 cac:	80 81       	ld	r24, Z
 cae:	81 60       	ori	r24, 0x01	; 1
 cb0:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 cb2:	80 81       	ld	r24, Z
 cb4:	80 68       	ori	r24, 0x80	; 128
 cb6:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 cb8:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 cbc:	08 95       	ret

00000cbe <turnOffPWM>:
	} else {
		*out |= bit;
	}

	SREG = oldSREG;
}
 cbe:	83 30       	cpi	r24, 0x03	; 3
 cc0:	81 f0       	breq	.+32     	; 0xce2 <turnOffPWM+0x24>
 cc2:	28 f4       	brcc	.+10     	; 0xcce <turnOffPWM+0x10>
 cc4:	81 30       	cpi	r24, 0x01	; 1
 cc6:	99 f0       	breq	.+38     	; 0xcee <turnOffPWM+0x30>
 cc8:	82 30       	cpi	r24, 0x02	; 2
 cca:	a1 f0       	breq	.+40     	; 0xcf4 <turnOffPWM+0x36>
 ccc:	08 95       	ret
 cce:	87 30       	cpi	r24, 0x07	; 7
 cd0:	a9 f0       	breq	.+42     	; 0xcfc <turnOffPWM+0x3e>
 cd2:	88 30       	cpi	r24, 0x08	; 8
 cd4:	b9 f0       	breq	.+46     	; 0xd04 <turnOffPWM+0x46>
 cd6:	84 30       	cpi	r24, 0x04	; 4
 cd8:	d1 f4       	brne	.+52     	; 0xd0e <turnOffPWM+0x50>
 cda:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 cde:	8f 7d       	andi	r24, 0xDF	; 223
 ce0:	03 c0       	rjmp	.+6      	; 0xce8 <turnOffPWM+0x2a>
 ce2:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 ce6:	8f 77       	andi	r24, 0x7F	; 127
 ce8:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 cec:	08 95       	ret
 cee:	84 b5       	in	r24, 0x24	; 36
 cf0:	8f 77       	andi	r24, 0x7F	; 127
 cf2:	02 c0       	rjmp	.+4      	; 0xcf8 <turnOffPWM+0x3a>
 cf4:	84 b5       	in	r24, 0x24	; 36
 cf6:	8f 7d       	andi	r24, 0xDF	; 223
 cf8:	84 bd       	out	0x24, r24	; 36
 cfa:	08 95       	ret
 cfc:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 d00:	8f 77       	andi	r24, 0x7F	; 127
 d02:	03 c0       	rjmp	.+6      	; 0xd0a <turnOffPWM+0x4c>
 d04:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 d08:	8f 7d       	andi	r24, 0xDF	; 223
 d0a:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 d0e:	08 95       	ret

00000d10 <pinMode>:
 d10:	cf 93       	push	r28
 d12:	df 93       	push	r29
 d14:	90 e0       	ldi	r25, 0x00	; 0
 d16:	fc 01       	movw	r30, r24
 d18:	e0 57       	subi	r30, 0x70	; 112
 d1a:	ff 4f       	sbci	r31, 0xFF	; 255
 d1c:	24 91       	lpm	r18, Z
 d1e:	fc 01       	movw	r30, r24
 d20:	ec 55       	subi	r30, 0x5C	; 92
 d22:	ff 4f       	sbci	r31, 0xFF	; 255
 d24:	84 91       	lpm	r24, Z
 d26:	88 23       	and	r24, r24
 d28:	61 f1       	breq	.+88     	; 0xd82 <pinMode+0x72>
 d2a:	90 e0       	ldi	r25, 0x00	; 0
 d2c:	88 0f       	add	r24, r24
 d2e:	99 1f       	adc	r25, r25
 d30:	fc 01       	movw	r30, r24
 d32:	e4 53       	subi	r30, 0x34	; 52
 d34:	ff 4f       	sbci	r31, 0xFF	; 255
 d36:	c5 91       	lpm	r28, Z+
 d38:	d4 91       	lpm	r29, Z
 d3a:	fc 01       	movw	r30, r24
 d3c:	ee 53       	subi	r30, 0x3E	; 62
 d3e:	ff 4f       	sbci	r31, 0xFF	; 255
 d40:	a5 91       	lpm	r26, Z+
 d42:	b4 91       	lpm	r27, Z
 d44:	61 11       	cpse	r22, r1
 d46:	09 c0       	rjmp	.+18     	; 0xd5a <pinMode+0x4a>
 d48:	9f b7       	in	r25, 0x3f	; 63
 d4a:	f8 94       	cli
 d4c:	88 81       	ld	r24, Y
 d4e:	20 95       	com	r18
 d50:	82 23       	and	r24, r18
 d52:	88 83       	st	Y, r24
 d54:	ec 91       	ld	r30, X
 d56:	2e 23       	and	r18, r30
 d58:	0b c0       	rjmp	.+22     	; 0xd70 <pinMode+0x60>
 d5a:	62 30       	cpi	r22, 0x02	; 2
 d5c:	61 f4       	brne	.+24     	; 0xd76 <pinMode+0x66>
 d5e:	9f b7       	in	r25, 0x3f	; 63
 d60:	f8 94       	cli
 d62:	88 81       	ld	r24, Y
 d64:	32 2f       	mov	r19, r18
 d66:	30 95       	com	r19
 d68:	83 23       	and	r24, r19
 d6a:	88 83       	st	Y, r24
 d6c:	ec 91       	ld	r30, X
 d6e:	2e 2b       	or	r18, r30
 d70:	2c 93       	st	X, r18
 d72:	9f bf       	out	0x3f, r25	; 63
 d74:	06 c0       	rjmp	.+12     	; 0xd82 <pinMode+0x72>
 d76:	8f b7       	in	r24, 0x3f	; 63
 d78:	f8 94       	cli
 d7a:	e8 81       	ld	r30, Y
 d7c:	2e 2b       	or	r18, r30
 d7e:	28 83       	st	Y, r18
 d80:	8f bf       	out	0x3f, r24	; 63
 d82:	df 91       	pop	r29
 d84:	cf 91       	pop	r28
 d86:	08 95       	ret

00000d88 <digitalRead>:

int digitalRead(uint8_t pin)
{
 d88:	cf 93       	push	r28
 d8a:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
 d8c:	28 2f       	mov	r18, r24
 d8e:	30 e0       	ldi	r19, 0x00	; 0
 d90:	f9 01       	movw	r30, r18
 d92:	e4 58       	subi	r30, 0x84	; 132
 d94:	ff 4f       	sbci	r31, 0xFF	; 255
 d96:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
 d98:	f9 01       	movw	r30, r18
 d9a:	e0 57       	subi	r30, 0x70	; 112
 d9c:	ff 4f       	sbci	r31, 0xFF	; 255
 d9e:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
 da0:	f9 01       	movw	r30, r18
 da2:	ec 55       	subi	r30, 0x5C	; 92
 da4:	ff 4f       	sbci	r31, 0xFF	; 255
 da6:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
 da8:	cc 23       	and	r28, r28
 daa:	91 f0       	breq	.+36     	; 0xdd0 <digitalRead+0x48>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 dac:	81 11       	cpse	r24, r1
 dae:	0e 94 5f 06 	call	0xcbe	; 0xcbe <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
 db2:	ec 2f       	mov	r30, r28
 db4:	f0 e0       	ldi	r31, 0x00	; 0
 db6:	ee 0f       	add	r30, r30
 db8:	ff 1f       	adc	r31, r31
 dba:	e8 54       	subi	r30, 0x48	; 72
 dbc:	ff 4f       	sbci	r31, 0xFF	; 255
 dbe:	a5 91       	lpm	r26, Z+
 dc0:	b4 91       	lpm	r27, Z
 dc2:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
 dc4:	ed 23       	and	r30, r29
 dc6:	81 e0       	ldi	r24, 0x01	; 1
 dc8:	90 e0       	ldi	r25, 0x00	; 0
 dca:	21 f4       	brne	.+8      	; 0xdd4 <digitalRead+0x4c>
 dcc:	80 e0       	ldi	r24, 0x00	; 0
 dce:	02 c0       	rjmp	.+4      	; 0xdd4 <digitalRead+0x4c>
 dd0:	80 e0       	ldi	r24, 0x00	; 0
 dd2:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
 dd4:	df 91       	pop	r29
 dd6:	cf 91       	pop	r28
 dd8:	08 95       	ret

00000dda <__udivmodsi4>:
 dda:	a1 e2       	ldi	r26, 0x21	; 33
 ddc:	1a 2e       	mov	r1, r26
 dde:	aa 1b       	sub	r26, r26
 de0:	bb 1b       	sub	r27, r27
 de2:	fd 01       	movw	r30, r26
 de4:	0d c0       	rjmp	.+26     	; 0xe00 <__udivmodsi4_ep>

00000de6 <__udivmodsi4_loop>:
 de6:	aa 1f       	adc	r26, r26
 de8:	bb 1f       	adc	r27, r27
 dea:	ee 1f       	adc	r30, r30
 dec:	ff 1f       	adc	r31, r31
 dee:	a2 17       	cp	r26, r18
 df0:	b3 07       	cpc	r27, r19
 df2:	e4 07       	cpc	r30, r20
 df4:	f5 07       	cpc	r31, r21
 df6:	20 f0       	brcs	.+8      	; 0xe00 <__udivmodsi4_ep>
 df8:	a2 1b       	sub	r26, r18
 dfa:	b3 0b       	sbc	r27, r19
 dfc:	e4 0b       	sbc	r30, r20
 dfe:	f5 0b       	sbc	r31, r21

00000e00 <__udivmodsi4_ep>:
 e00:	66 1f       	adc	r22, r22
 e02:	77 1f       	adc	r23, r23
 e04:	88 1f       	adc	r24, r24
 e06:	99 1f       	adc	r25, r25
 e08:	1a 94       	dec	r1
 e0a:	69 f7       	brne	.-38     	; 0xde6 <__udivmodsi4_loop>
 e0c:	60 95       	com	r22
 e0e:	70 95       	com	r23
 e10:	80 95       	com	r24
 e12:	90 95       	com	r25
 e14:	9b 01       	movw	r18, r22
 e16:	ac 01       	movw	r20, r24
 e18:	bd 01       	movw	r22, r26
 e1a:	cf 01       	movw	r24, r30
 e1c:	08 95       	ret

00000e1e <__tablejump2__>:
 e1e:	ee 0f       	add	r30, r30
 e20:	ff 1f       	adc	r31, r31
 e22:	05 90       	lpm	r0, Z+
 e24:	f4 91       	lpm	r31, Z
 e26:	e0 2d       	mov	r30, r0
 e28:	09 94       	ijmp

00000e2a <_exit>:
 e2a:	f8 94       	cli

00000e2c <__stop_program>:
 e2c:	ff cf       	rjmp	.-2      	; 0xe2c <__stop_program>
